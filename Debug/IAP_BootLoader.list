
IAP_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000271c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          0000010c  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000011c  2000011c  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004d55  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001163  00000000  00000000  00024d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000680  00000000  00000000  00025ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000598  00000000  00000000  00026578  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002397  00000000  00000000  00026b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002480  00000000  00000000  00028ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002b327  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000188c  00000000  00000000  0002b3a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002cc30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080028b0 	.word	0x080028b0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	080028b0 	.word	0x080028b0

080001ec <main>:




int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	Hardware_Init();
 80001f0:	f000 f908 	bl	8000404 <Hardware_Init>
	GPIO_Peripheral_Configuration();
 80001f4:	f000 f92a 	bl	800044c <GPIO_Peripheral_Configuration>
	USART1_Configuration();
 80001f8:	f000 f990 	bl	800051c <USART1_Configuration>



	printmsg("Hello From Test App!! \r\n");
 80001fc:	4820      	ldr	r0, [pc, #128]	; (8000280 <main+0x94>)
 80001fe:	f000 f8f7 	bl	80003f0 <printmsg>


	if(u8GPIO_GetPinValue(GPIOA, PIN0) == GPIO_VALUE_SET)
 8000202:	2100      	movs	r1, #0
 8000204:	481f      	ldr	r0, [pc, #124]	; (8000284 <main+0x98>)
 8000206:	f001 fd88 	bl	8001d1a <u8GPIO_GetPinValue>
 800020a:	4603      	mov	r3, r0
 800020c:	2b01      	cmp	r3, #1
 800020e:	d11c      	bne.n	800024a <main+0x5e>
	{
		printmsg("BL DEBUG MSG: Buttonb is pressed, Going to BL Mood \n\r");
 8000210:	481d      	ldr	r0, [pc, #116]	; (8000288 <main+0x9c>)
 8000212:	f000 f8ed 	bl	80003f0 <printmsg>


		vidGPIO_SetPinValue(GPIOG, PIN13, GPIO_VALUE_SET);
 8000216:	2201      	movs	r2, #1
 8000218:	210d      	movs	r1, #13
 800021a:	481c      	ldr	r0, [pc, #112]	; (800028c <main+0xa0>)
 800021c:	f001 fd18 	bl	8001c50 <vidGPIO_SetPinValue>
		_delay_ms(1000);
 8000220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000224:	f001 fb06 	bl	8001834 <_delay_ms>
        vidGPIO_SetPinValue(GPIOG, PIN13, GPIO_VALUE_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	210d      	movs	r1, #13
 800022c:	4817      	ldr	r0, [pc, #92]	; (800028c <main+0xa0>)
 800022e:	f001 fd0f 	bl	8001c50 <vidGPIO_SetPinValue>
		_delay_ms(1000);
 8000232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000236:	f001 fafd 	bl	8001834 <_delay_ms>

        vidGPIO_SetPinValue(GPIOG, PIN13, GPIO_VALUE_SET);
 800023a:	2201      	movs	r2, #1
 800023c:	210d      	movs	r1, #13
 800023e:	4813      	ldr	r0, [pc, #76]	; (800028c <main+0xa0>)
 8000240:	f001 fd06 	bl	8001c50 <vidGPIO_SetPinValue>



		Bootloader_UART_Read_Data();
 8000244:	f000 f826 	bl	8000294 <Bootloader_UART_Read_Data>
 8000248:	e016      	b.n	8000278 <main+0x8c>

	}

	else
	{
		printmsg("BL DEBUG MSG: Button is NOT Pressed, Go to user code \n\r");
 800024a:	4811      	ldr	r0, [pc, #68]	; (8000290 <main+0xa4>)
 800024c:	f000 f8d0 	bl	80003f0 <printmsg>

        vidGPIO_SetPinValue(GPIOG, PIN14, GPIO_VALUE_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	210e      	movs	r1, #14
 8000254:	480d      	ldr	r0, [pc, #52]	; (800028c <main+0xa0>)
 8000256:	f001 fcfb 	bl	8001c50 <vidGPIO_SetPinValue>
		_delay_ms(1000);
 800025a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025e:	f001 fae9 	bl	8001834 <_delay_ms>
        vidGPIO_SetPinValue(GPIOG, PIN14, GPIO_VALUE_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	210e      	movs	r1, #14
 8000266:	4809      	ldr	r0, [pc, #36]	; (800028c <main+0xa0>)
 8000268:	f001 fcf2 	bl	8001c50 <vidGPIO_SetPinValue>
		_delay_ms(1000);
 800026c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000270:	f001 fae0 	bl	8001834 <_delay_ms>


		Bootloader_Jump_To_User_Application();
 8000274:	f000 f890 	bl	8000398 <Bootloader_Jump_To_User_Application>
 8000278:	2300      	movs	r3, #0


	}

}
 800027a:	4618      	mov	r0, r3
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	080028c8 	.word	0x080028c8
 8000284:	40020000 	.word	0x40020000
 8000288:	080028e4 	.word	0x080028e4
 800028c:	40021800 	.word	0x40021800
 8000290:	0800291c 	.word	0x0800291c

08000294 <Bootloader_UART_Read_Data>:
  * 		and then start execute it
  * @Param  None
  * @retval None
**/
void Bootloader_UART_Read_Data(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
	u8 Rx_Length = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		/* Clear the Buffer */
		memset(BL_Rx_Buffer, 0, 200);
 800029e:	22c8      	movs	r2, #200	; 0xc8
 80002a0:	2100      	movs	r1, #0
 80002a2:	4838      	ldr	r0, [pc, #224]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 80002a4:	f002 fafc 	bl	80028a0 <memset>

		/* Read the First byte (Command Length) */

		vidUSART_Receive(USART1, &husart1, &BL_Rx_Buffer[0], 1);
 80002a8:	2301      	movs	r3, #1
 80002aa:	4a36      	ldr	r2, [pc, #216]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 80002ac:	4936      	ldr	r1, [pc, #216]	; (8000388 <Bootloader_UART_Read_Data+0xf4>)
 80002ae:	4837      	ldr	r0, [pc, #220]	; (800038c <Bootloader_UART_Read_Data+0xf8>)
 80002b0:	f001 fa1b 	bl	80016ea <vidUSART_Receive>

		Rx_Length = BL_Rx_Buffer[0];
 80002b4:	4b33      	ldr	r3, [pc, #204]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	71fb      	strb	r3, [r7, #7]


		vidUSART_Receive(USART1, &husart1, &BL_Rx_Buffer[1], Rx_Length);
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	b29b      	uxth	r3, r3
 80002be:	4a34      	ldr	r2, [pc, #208]	; (8000390 <Bootloader_UART_Read_Data+0xfc>)
 80002c0:	4931      	ldr	r1, [pc, #196]	; (8000388 <Bootloader_UART_Read_Data+0xf4>)
 80002c2:	4832      	ldr	r0, [pc, #200]	; (800038c <Bootloader_UART_Read_Data+0xf8>)
 80002c4:	f001 fa11 	bl	80016ea <vidUSART_Receive>

		/* Conditional Statment for command */
		switch(BL_Rx_Buffer[1])
 80002c8:	4b2e      	ldr	r3, [pc, #184]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 80002ca:	785b      	ldrb	r3, [r3, #1]
 80002cc:	3b51      	subs	r3, #81	; 0x51
 80002ce:	2b0d      	cmp	r3, #13
 80002d0:	d852      	bhi.n	8000378 <Bootloader_UART_Read_Data+0xe4>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <Bootloader_UART_Read_Data+0x44>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	08000311 	.word	0x08000311
 80002dc:	08000319 	.word	0x08000319
 80002e0:	08000321 	.word	0x08000321
 80002e4:	08000329 	.word	0x08000329
 80002e8:	08000331 	.word	0x08000331
 80002ec:	08000339 	.word	0x08000339
 80002f0:	08000341 	.word	0x08000341
 80002f4:	08000349 	.word	0x08000349
 80002f8:	08000351 	.word	0x08000351
 80002fc:	08000359 	.word	0x08000359
 8000300:	08000361 	.word	0x08000361
 8000304:	08000369 	.word	0x08000369
 8000308:	08000379 	.word	0x08000379
 800030c:	08000371 	.word	0x08000371
		{
		case BL_GET_VER:
			BootLoader_Handle_GetVer_CMD(BL_Rx_Buffer);
 8000310:	481c      	ldr	r0, [pc, #112]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 8000312:	f000 f923 	bl	800055c <BootLoader_Handle_GetVer_CMD>
			break;
 8000316:	e033      	b.n	8000380 <Bootloader_UART_Read_Data+0xec>

		case BL_GET_HELP:
			BootLoader_Handle_GetHelp_CMD(BL_Rx_Buffer);
 8000318:	481a      	ldr	r0, [pc, #104]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 800031a:	f000 f969 	bl	80005f0 <BootLoader_Handle_GetHelp_CMD>
			break;
 800031e:	e02f      	b.n	8000380 <Bootloader_UART_Read_Data+0xec>

		case BL_GET_CID:
			BootLoader_Handle_GetCID_CMD(BL_Rx_Buffer);
 8000320:	4818      	ldr	r0, [pc, #96]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 8000322:	f000 f9a1 	bl	8000668 <BootLoader_Handle_GetCID_CMD>
			break;
 8000326:	e02b      	b.n	8000380 <Bootloader_UART_Read_Data+0xec>

		case BL_GET_RDP_STATUS:
			BootLoader_Handle_GetRDP_CMD(BL_Rx_Buffer);
 8000328:	4816      	ldr	r0, [pc, #88]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 800032a:	f000 f9e9 	bl	8000700 <BootLoader_Handle_GetRDP_CMD>
			break;
 800032e:	e027      	b.n	8000380 <Bootloader_UART_Read_Data+0xec>

		case BL_GO_TO_ADDR:
			BootLoader_Handle_Go_CMD(BL_Rx_Buffer);
 8000330:	4814      	ldr	r0, [pc, #80]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 8000332:	f000 fa31 	bl	8000798 <BootLoader_Handle_Go_CMD>
			break;
 8000336:	e023      	b.n	8000380 <Bootloader_UART_Read_Data+0xec>

		case BL_FLASH_ERASE:
			BootLoader_Handle_Flash_Erase_CMD(BL_Rx_Buffer);
 8000338:	4812      	ldr	r0, [pc, #72]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 800033a:	f000 faff 	bl	800093c <BootLoader_Handle_Flash_Erase_CMD>
			break;
 800033e:	e01f      	b.n	8000380 <Bootloader_UART_Read_Data+0xec>

		case BL_MEM_WRITE:
			BootLoader_Handle_Mem_Write_CMD(BL_Rx_Buffer);
 8000340:	4810      	ldr	r0, [pc, #64]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 8000342:	f000 fb65 	bl	8000a10 <BootLoader_Handle_Mem_Write_CMD>
			break;
 8000346:	e01b      	b.n	8000380 <Bootloader_UART_Read_Data+0xec>

		case BL_EN_RW_PROTECT:
			BootLoader_Handle_Enable_RW_Protection(BL_Rx_Buffer);
 8000348:	480e      	ldr	r0, [pc, #56]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 800034a:	f000 fbe1 	bl	8000b10 <BootLoader_Handle_Enable_RW_Protection>
			break;
 800034e:	e017      	b.n	8000380 <Bootloader_UART_Read_Data+0xec>

		case BL_MEM_READ:
			BootLoader_Handle_Mem_Read(BL_Rx_Buffer);
 8000350:	480c      	ldr	r0, [pc, #48]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 8000352:	f000 fc2f 	bl	8000bb4 <BootLoader_Handle_Mem_Read>
			break;
 8000356:	e013      	b.n	8000380 <Bootloader_UART_Read_Data+0xec>

		case BL_READ_SECTOR_P_STATUS:
			BootLoader_Handle_Read_Sector_Status(BL_Rx_Buffer);
 8000358:	480a      	ldr	r0, [pc, #40]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 800035a:	f000 fc81 	bl	8000c60 <BootLoader_Handle_Read_Sector_Status>
			break;
 800035e:	e00f      	b.n	8000380 <Bootloader_UART_Read_Data+0xec>

		case BL_OTP_READ:
			BootLoader_Handle_Read_OTP(BL_Rx_Buffer);
 8000360:	4808      	ldr	r0, [pc, #32]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 8000362:	f000 fcc7 	bl	8000cf4 <BootLoader_Handle_Read_OTP>
			break;
 8000366:	e00b      	b.n	8000380 <Bootloader_UART_Read_Data+0xec>

		case BL_DIS_R_W_PROTECT:
			BootLoader_Handle_Disable_RW_Protection(BL_Rx_Buffer);
 8000368:	4806      	ldr	r0, [pc, #24]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 800036a:	f000 fccd 	bl	8000d08 <BootLoader_Handle_Disable_RW_Protection>
			break;
 800036e:	e007      	b.n	8000380 <Bootloader_UART_Read_Data+0xec>

		case BL_FLASH_MASS_ERASE:
			BootLoader_Handle_Flash_Mass_Erase_CMD(BL_Rx_Buffer);
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <Bootloader_UART_Read_Data+0xf0>)
 8000372:	f000 fa81 	bl	8000878 <BootLoader_Handle_Flash_Mass_Erase_CMD>
			break;
 8000376:	e003      	b.n	8000380 <Bootloader_UART_Read_Data+0xec>

		default:
			printmsg("BL_DEBUG_MSG: Invalid Command \n");
 8000378:	4806      	ldr	r0, [pc, #24]	; (8000394 <Bootloader_UART_Read_Data+0x100>)
 800037a:	f000 f839 	bl	80003f0 <printmsg>
			break;
 800037e:	bf00      	nop
		memset(BL_Rx_Buffer, 0, 200);
 8000380:	e78d      	b.n	800029e <Bootloader_UART_Read_Data+0xa>
 8000382:	bf00      	nop
 8000384:	20000034 	.word	0x20000034
 8000388:	200000fc 	.word	0x200000fc
 800038c:	40011000 	.word	0x40011000
 8000390:	20000035 	.word	0x20000035
 8000394:	08002954 	.word	0x08002954

08000398 <Bootloader_Jump_To_User_Application>:
  * @brief  Jump to user app if the user button not pressed
  * @Param  None
  * @retval None
**/
void Bootloader_Jump_To_User_Application(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
	/* Function Pointer to Hold the Address of Reset Handler of User Application */
	void (*App_Reset_Handler)(void);


	printmsg("BL_DEBUG_MSG: Bootloader_Jumb_To_User_Application \n");
 800039e:	480f      	ldr	r0, [pc, #60]	; (80003dc <Bootloader_Jump_To_User_Application+0x44>)
 80003a0:	f000 f826 	bl	80003f0 <printmsg>

	/* Configure the MSP by Reading the value of the sector 2 base address */
	uint32_t MSP_Address = *(volatile uint32_t*)SECTOR2_BASE_ADDRESS;
 80003a4:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <Bootloader_Jump_To_User_Application+0x48>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	60fb      	str	r3, [r7, #12]
	printmsg("BL_DEBUG_MSG: MSP Value = %#x\n",MSP_Address);
 80003aa:	68f9      	ldr	r1, [r7, #12]
 80003ac:	480d      	ldr	r0, [pc, #52]	; (80003e4 <Bootloader_Jump_To_User_Application+0x4c>)
 80003ae:	f000 f81f 	bl	80003f0 <printmsg>
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	603b      	str	r3, [r7, #0]
#ifndef   __ASM
  #define __ASM                                  __asm
#endif
__STATIC_FORCEINLINE void __set_MSP(u32 topOfMainStack)
{
	__ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	f383 8808 	msr	MSP, r3
	__set_MSP(MSP_Address);

	/* Fetch the reset handler address of user application
	 * From Location SECTOR2_BASE_ADDRESS + 4
	 */
	uint32_t ResetHandler_Address = *(volatile uint32_t*)(SECTOR2_BASE_ADDRESS + 4);
 80003bc:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <Bootloader_Jump_To_User_Application+0x50>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	60bb      	str	r3, [r7, #8]

	/* Assign the ResetHandler address of user application
	 * To Function Pointer
	 */
	App_Reset_Handler = (void*) ResetHandler_Address;
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	607b      	str	r3, [r7, #4]
	printmsg("BL_DEBUG_MSG: User Application Reset Handler Value = %#x\n",ResetHandler_Address);
 80003c6:	68b9      	ldr	r1, [r7, #8]
 80003c8:	4808      	ldr	r0, [pc, #32]	; (80003ec <Bootloader_Jump_To_User_Application+0x54>)
 80003ca:	f000 f811 	bl	80003f0 <printmsg>


	/* Jump to Reset Handler Address of User Application By Calling the Function*/
	App_Reset_Handler();
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4798      	blx	r3
}
 80003d2:	bf00      	nop
 80003d4:	3710      	adds	r7, #16
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	08002974 	.word	0x08002974
 80003e0:	08008000 	.word	0x08008000
 80003e4:	080029a8 	.word	0x080029a8
 80003e8:	08008004 	.word	0x08008004
 80003ec:	080029c8 	.word	0x080029c8

080003f0 <printmsg>:
  * @brief Print message using USART Terminal
  * @param pointer to user message
  * @retval None
  */
void printmsg(char* format, ...)
{
 80003f0:	b40f      	push	{r0, r1, r2, r3}
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0

va_end(args);


#endif
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	b004      	add	sp, #16
 8000400:	4770      	bx	lr
	...

08000404 <Hardware_Init>:
  * @brief Hardware Initialization Function
  * @param None
  * @retval None
  */
static void Hardware_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	//vidRCC_RegInit();
	vidRCC_Init();
 8000408:	f001 fa42 	bl	8001890 <vidRCC_Init>
	vidNVIC_Init();
 800040c:	f001 fabe 	bl	800198c <vidNVIC_Init>

	vidSYSTICK_Init(89999);
 8000410:	480d      	ldr	r0, [pc, #52]	; (8000448 <Hardware_Init+0x44>)
 8000412:	f001 fa23 	bl	800185c <vidSYSTICK_Init>
	vidRCC_EnableClock(RCC_CRC);
 8000416:	200c      	movs	r0, #12
 8000418:	f001 fa50 	bl	80018bc <vidRCC_EnableClock>
	vidRCC_EnableClock(RCC_GPIOA);
 800041c:	2000      	movs	r0, #0
 800041e:	f001 fa4d 	bl	80018bc <vidRCC_EnableClock>
	vidRCC_EnableClock(RCC_GPIOG);
 8000422:	2006      	movs	r0, #6
 8000424:	f001 fa4a 	bl	80018bc <vidRCC_EnableClock>
	vidRCC_EnableClock(RCC_GPIOD);
 8000428:	2003      	movs	r0, #3
 800042a:	f001 fa47 	bl	80018bc <vidRCC_EnableClock>
	vidRCC_EnableClock(RCC_USART1);
 800042e:	20a4      	movs	r0, #164	; 0xa4
 8000430:	f001 fa44 	bl	80018bc <vidRCC_EnableClock>
	vidRCC_EnableClock(RCC_USART2);
 8000434:	2091      	movs	r0, #145	; 0x91
 8000436:	f001 fa41 	bl	80018bc <vidRCC_EnableClock>
	vidRCC_EnableClock(RCC_DMA2E);
 800043a:	2016      	movs	r0, #22
 800043c:	f001 fa3e 	bl	80018bc <vidRCC_EnableClock>

	vidGPIO_Init_Reg();
 8000440:	f001 fab8 	bl	80019b4 <vidGPIO_Init_Reg>


}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	00015f8f 	.word	0x00015f8f

0800044c <GPIO_Peripheral_Configuration>:
  * @brief 	GPIO Peripherals Initialization Function
  * @param 	None
  * @retval None
  */
static void GPIO_Peripheral_Configuration(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0

	/* USART1 Config */
	hgpio.GPIO_PIN    	= (PIN9);
 8000450:	4b2f      	ldr	r3, [pc, #188]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 8000452:	2209      	movs	r2, #9
 8000454:	601a      	str	r2, [r3, #0]
	hgpio.GPIO_MODE   	= GPIO_MODE_AF;
 8000456:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 8000458:	2202      	movs	r2, #2
 800045a:	711a      	strb	r2, [r3, #4]
	hgpio.GPIO_OUT	  	= GPIO_OUT_PP;
 800045c:	4b2c      	ldr	r3, [pc, #176]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 800045e:	2200      	movs	r2, #0
 8000460:	715a      	strb	r2, [r3, #5]
	hgpio.GPIO_SPEED  	= GPIO_SPEED_ULTRA;
 8000462:	4b2b      	ldr	r3, [pc, #172]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 8000464:	2203      	movs	r2, #3
 8000466:	719a      	strb	r2, [r3, #6]
	hgpio.GPIO_PULL   	= GPIO_PULL_NO;
 8000468:	4b29      	ldr	r3, [pc, #164]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 800046a:	2200      	movs	r2, #0
 800046c:	71da      	strb	r2, [r3, #7]

	vidGPIO_Init(GPIOA,&hgpio);
 800046e:	4928      	ldr	r1, [pc, #160]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 8000470:	4828      	ldr	r0, [pc, #160]	; (8000514 <GPIO_Peripheral_Configuration+0xc8>)
 8000472:	f001 fbab 	bl	8001bcc <vidGPIO_Init>
	vidGPIO_AlternateFunction(GPIOA,(PIN9),AF7);
 8000476:	2207      	movs	r2, #7
 8000478:	2109      	movs	r1, #9
 800047a:	4826      	ldr	r0, [pc, #152]	; (8000514 <GPIO_Peripheral_Configuration+0xc8>)
 800047c:	f001 fc1b 	bl	8001cb6 <vidGPIO_AlternateFunction>

	hgpio.GPIO_PIN		= PIN10;
 8000480:	4b23      	ldr	r3, [pc, #140]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 8000482:	220a      	movs	r2, #10
 8000484:	601a      	str	r2, [r3, #0]
	hgpio.GPIO_MODE		= GPIO_MODE_AF;
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 8000488:	2202      	movs	r2, #2
 800048a:	711a      	strb	r2, [r3, #4]
	hgpio.GPIO_OUT		= GPIO_OUT_PP;
 800048c:	4b20      	ldr	r3, [pc, #128]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 800048e:	2200      	movs	r2, #0
 8000490:	715a      	strb	r2, [r3, #5]
	hgpio.GPIO_SPEED	= GPIO_SPEED_ULTRA;
 8000492:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 8000494:	2203      	movs	r2, #3
 8000496:	719a      	strb	r2, [r3, #6]
	hgpio.GPIO_PULL		= GPIO_PULL_NO;
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 800049a:	2200      	movs	r2, #0
 800049c:	71da      	strb	r2, [r3, #7]

	vidGPIO_Init(GPIOA, &hgpio);
 800049e:	491c      	ldr	r1, [pc, #112]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004a0:	481c      	ldr	r0, [pc, #112]	; (8000514 <GPIO_Peripheral_Configuration+0xc8>)
 80004a2:	f001 fb93 	bl	8001bcc <vidGPIO_Init>
	vidGPIO_AlternateFunction(GPIOA,PIN10,AF7);
 80004a6:	2207      	movs	r2, #7
 80004a8:	210a      	movs	r1, #10
 80004aa:	481a      	ldr	r0, [pc, #104]	; (8000514 <GPIO_Peripheral_Configuration+0xc8>)
 80004ac:	f001 fc03 	bl	8001cb6 <vidGPIO_AlternateFunction>


	/* Configuration for PushButton PA0 */
	hgpio.GPIO_PIN		= PIN0;
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
	hgpio.GPIO_MODE		= GPIO_MODE_IN;
 80004b6:	4b16      	ldr	r3, [pc, #88]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	711a      	strb	r2, [r3, #4]
	hgpio.GPIO_PULL		= GPIO_PULL_DOWN;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004be:	2202      	movs	r2, #2
 80004c0:	71da      	strb	r2, [r3, #7]
	hgpio.GPIO_OUT		= 0;
 80004c2:	4b13      	ldr	r3, [pc, #76]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	715a      	strb	r2, [r3, #5]
	hgpio.GPIO_SPEED	= GPIO_SPEED_LOW;
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	719a      	strb	r2, [r3, #6]

	vidGPIO_Init(GPIOA, &hgpio);
 80004ce:	4910      	ldr	r1, [pc, #64]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004d0:	4810      	ldr	r0, [pc, #64]	; (8000514 <GPIO_Peripheral_Configuration+0xc8>)
 80004d2:	f001 fb7b 	bl	8001bcc <vidGPIO_Init>

	 /* Configuration for LEDs PG13, PG14 */
	hgpio.GPIO_PIN		= PIN13;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004d8:	220d      	movs	r2, #13
 80004da:	601a      	str	r2, [r3, #0]
	hgpio.GPIO_MODE		= GPIO_MODE_GPO;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004de:	2201      	movs	r2, #1
 80004e0:	711a      	strb	r2, [r3, #4]
	hgpio.GPIO_OUT		= GPIO_OUT_PP;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	715a      	strb	r2, [r3, #5]
	hgpio.GPIO_PULL		= GPIO_PULL_NO;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	71da      	strb	r2, [r3, #7]
	hgpio.GPIO_SPEED	= GPIO_SPEED_HIGH;
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004f0:	2202      	movs	r2, #2
 80004f2:	719a      	strb	r2, [r3, #6]
	vidGPIO_Init(GPIOG,&hgpio);
 80004f4:	4906      	ldr	r1, [pc, #24]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004f6:	4808      	ldr	r0, [pc, #32]	; (8000518 <GPIO_Peripheral_Configuration+0xcc>)
 80004f8:	f001 fb68 	bl	8001bcc <vidGPIO_Init>

	hgpio.GPIO_PIN		= PIN14;
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 80004fe:	220e      	movs	r2, #14
 8000500:	601a      	str	r2, [r3, #0]
	vidGPIO_Init(GPIOG,&hgpio);
 8000502:	4903      	ldr	r1, [pc, #12]	; (8000510 <GPIO_Peripheral_Configuration+0xc4>)
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <GPIO_Peripheral_Configuration+0xcc>)
 8000506:	f001 fb61 	bl	8001bcc <vidGPIO_Init>


}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2000002c 	.word	0x2000002c
 8000514:	40020000 	.word	0x40020000
 8000518:	40021800 	.word	0x40021800

0800051c <USART1_Configuration>:
  * @brief 	USART1 Configuration Initialization Function
  * @param 	None
  * @retval None
  */
static void USART1_Configuration(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0

	husart1.Parity   		= NO;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <USART1_Configuration+0x38>)
 8000522:	2200      	movs	r2, #0
 8000524:	801a      	strh	r2, [r3, #0]
	husart1.OverSampling	= NO;
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <USART1_Configuration+0x38>)
 8000528:	2200      	movs	r2, #0
 800052a:	805a      	strh	r2, [r3, #2]
	husart1.WordLength 		= Data_Bits_8;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <USART1_Configuration+0x38>)
 800052e:	2200      	movs	r2, #0
 8000530:	80da      	strh	r2, [r3, #6]
	husart1.StopBit			= One_Bit;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <USART1_Configuration+0x38>)
 8000534:	2200      	movs	r2, #0
 8000536:	811a      	strh	r2, [r3, #8]
	husart1.Mode			= (Receiver | Transmitter);
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <USART1_Configuration+0x38>)
 800053a:	220c      	movs	r2, #12
 800053c:	729a      	strb	r2, [r3, #10]
	husart1.BaudRate 		= BR115200;
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <USART1_Configuration+0x38>)
 8000540:	f240 320d 	movw	r2, #781	; 0x30d
 8000544:	809a      	strh	r2, [r3, #4]

	vidUSART_Init(USART1, &husart1);
 8000546:	4903      	ldr	r1, [pc, #12]	; (8000554 <USART1_Configuration+0x38>)
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <USART1_Configuration+0x3c>)
 800054a:	f001 f83e 	bl	80015ca <vidUSART_Init>


}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200000fc 	.word	0x200000fc
 8000558:	40011000 	.word	0x40011000

0800055c <BootLoader_Handle_GetVer_CMD>:
 * @brief Read the BootLoader Version on the MCU
 * @Param  Pointer to Received data from Host
 * @retval Bootloader Version Number (1 Byte)
**/
void BootLoader_Handle_GetVer_CMD(u8 *pBuffer)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

	u8 BL_Version;


	/* Verify CheckSum */
	printmsg("BL_DEBUG_MSG: BootLoader Handler Get Version \n");
 8000564:	481d      	ldr	r0, [pc, #116]	; (80005dc <BootLoader_Handle_GetVer_CMD+0x80>)
 8000566:	f7ff ff43 	bl	80003f0 <printmsg>

	/* Total Length of the Command Line */
	u32 Command_Packet_Len = BL_Rx_Buffer[0]+1;
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <BootLoader_Handle_GetVer_CMD+0x84>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	3301      	adds	r3, #1
 8000570:	617b      	str	r3, [r7, #20]

	/* Extract the CRC from Host */
	u32 Host_CRC = *((u32 *)(BL_Rx_Buffer+Command_Packet_Len - 4) );
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	3b04      	subs	r3, #4
 8000576:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <BootLoader_Handle_GetVer_CMD+0x84>)
 8000578:	4413      	add	r3, r2
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	613b      	str	r3, [r7, #16]

	if(! BootLoader_Verify_CRC(&BL_Rx_Buffer[0], Command_Packet_Len - 4, Host_CRC))
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	3b04      	subs	r3, #4
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	4619      	mov	r1, r3
 8000586:	4816      	ldr	r0, [pc, #88]	; (80005e0 <BootLoader_Handle_GetVer_CMD+0x84>)
 8000588:	f000 fc36 	bl	8000df8 <BootLoader_Verify_CRC>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d11a      	bne.n	80005c8 <BootLoader_Handle_GetVer_CMD+0x6c>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Sucess \n");
 8000592:	4814      	ldr	r0, [pc, #80]	; (80005e4 <BootLoader_Handle_GetVer_CMD+0x88>)
 8000594:	f7ff ff2c 	bl	80003f0 <printmsg>

		/* Used to send the Command size to C / Python Script
		 * In Host device
		 */
		BootLoader_Send_ACK(pBuffer[0], 1);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2101      	movs	r1, #1
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fbfe 	bl	8000da0 <BootLoader_Send_ACK>

		BL_Version = Get_BootLoader_Version();
 80005a4:	f000 fdc2 	bl	800112c <Get_BootLoader_Version>
 80005a8:	4603      	mov	r3, r0
 80005aa:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG: BL Version: %d %#x\n", BL_Version, BL_Version);
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	4619      	mov	r1, r3
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	461a      	mov	r2, r3
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <BootLoader_Handle_GetVer_CMD+0x8c>)
 80005b6:	f7ff ff1b 	bl	80003f0 <printmsg>
		BootLoader_UART_Write_Data(&BL_Version, 1);
 80005ba:	f107 030f 	add.w	r3, r7, #15
 80005be:	2101      	movs	r1, #1
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fdbb 	bl	800113c <BootLoader_UART_Write_Data>
		printmsg("BL_DEBUG_MSG: CheckSum Fail !!\n");
		BootLoader_Send_NACK();
	}


}
 80005c6:	e004      	b.n	80005d2 <BootLoader_Handle_GetVer_CMD+0x76>
		printmsg("BL_DEBUG_MSG: CheckSum Fail !!\n");
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <BootLoader_Handle_GetVer_CMD+0x90>)
 80005ca:	f7ff ff11 	bl	80003f0 <printmsg>
		BootLoader_Send_NACK();
 80005ce:	f000 fc01 	bl	8000dd4 <BootLoader_Send_NACK>
}
 80005d2:	bf00      	nop
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	08002a04 	.word	0x08002a04
 80005e0:	20000034 	.word	0x20000034
 80005e4:	08002a34 	.word	0x08002a34
 80005e8:	08002a54 	.word	0x08002a54
 80005ec:	08002a78 	.word	0x08002a78

080005f0 <BootLoader_Handle_GetHelp_CMD>:
 * @brief Know what are the Supported Commands
 * @Param  Pointer to Received data from Host
 * @retval All Supported Commands (10 Bytes)
**/
void BootLoader_Handle_GetHelp_CMD(u8 *pBuffer)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	printmsg("BL_DEBUG_MSG: BootLoader_Handle_GetHelp_CMD \n");
 80005f8:	4816      	ldr	r0, [pc, #88]	; (8000654 <BootLoader_Handle_GetHelp_CMD+0x64>)
 80005fa:	f7ff fef9 	bl	80003f0 <printmsg>

	/* Total Length of the Command Line */
	u32 Command_Packet_Len = BL_Rx_Buffer[0]+1;
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <BootLoader_Handle_GetHelp_CMD+0x68>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	60fb      	str	r3, [r7, #12]

	/* Extract the CRC from Host */
	u32 Host_CRC = *((u32 *) (BL_Rx_Buffer + Command_Packet_Len - 4) );
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3b04      	subs	r3, #4
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <BootLoader_Handle_GetHelp_CMD+0x68>)
 800060c:	4413      	add	r3, r2
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	60bb      	str	r3, [r7, #8]

	if(! BootLoader_Verify_CRC(&BL_Rx_Buffer[0], Command_Packet_Len - 4, Host_CRC))
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3b04      	subs	r3, #4
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	4619      	mov	r1, r3
 800061a:	480f      	ldr	r0, [pc, #60]	; (8000658 <BootLoader_Handle_GetHelp_CMD+0x68>)
 800061c:	f000 fbec 	bl	8000df8 <BootLoader_Verify_CRC>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d10d      	bne.n	8000642 <BootLoader_Handle_GetHelp_CMD+0x52>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Sucess \n");
 8000626:	480d      	ldr	r0, [pc, #52]	; (800065c <BootLoader_Handle_GetHelp_CMD+0x6c>)
 8000628:	f7ff fee2 	bl	80003f0 <printmsg>

		/* Used to send the Command size to C / Python Script
		 * In Host device
		 */
		BootLoader_Send_ACK(pBuffer[0], sizeof(Supported_Commands));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	210b      	movs	r1, #11
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fbb4 	bl	8000da0 <BootLoader_Send_ACK>
		BootLoader_UART_Write_Data(Supported_Commands, sizeof(Supported_Commands));
 8000638:	210b      	movs	r1, #11
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <BootLoader_Handle_GetHelp_CMD+0x70>)
 800063c:	f000 fd7e 	bl	800113c <BootLoader_UART_Write_Data>
	}
	else{
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
		BootLoader_Send_NACK();
	}
}
 8000640:	e004      	b.n	800064c <BootLoader_Handle_GetHelp_CMD+0x5c>
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <BootLoader_Handle_GetHelp_CMD+0x74>)
 8000644:	f7ff fed4 	bl	80003f0 <printmsg>
		BootLoader_Send_NACK();
 8000648:	f000 fbc4 	bl	8000dd4 <BootLoader_Send_NACK>
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08002a98 	.word	0x08002a98
 8000658:	20000034 	.word	0x20000034
 800065c:	08002a34 	.word	0x08002a34
 8000660:	20000000 	.word	0x20000000
 8000664:	08002ac8 	.word	0x08002ac8

08000668 <BootLoader_Handle_GetCID_CMD>:
 * @brief Read The MCU Chip ID Number
 * @Param  Pointer to Received data from Host
 * @retval Chip ID Number (2 Bytes)
 */
void BootLoader_Handle_GetCID_CMD(u8 *pBuffer)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	u16 C_ID = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	81fb      	strh	r3, [r7, #14]
	printmsg("BL_DEBUG_MSG: BootLoader_Handle_GetCID_CMD \n");
 8000674:	481d      	ldr	r0, [pc, #116]	; (80006ec <BootLoader_Handle_GetCID_CMD+0x84>)
 8000676:	f7ff febb 	bl	80003f0 <printmsg>

	/* Total Length of the Command Line */
	u32 Command_Packet_Len = BL_Rx_Buffer[0]+1;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <BootLoader_Handle_GetCID_CMD+0x88>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	3301      	adds	r3, #1
 8000680:	617b      	str	r3, [r7, #20]

	/* Extract the CRC from Host */
	u32 Host_CRC = *((u32 *) (BL_Rx_Buffer + Command_Packet_Len - 4) );
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	3b04      	subs	r3, #4
 8000686:	4a1a      	ldr	r2, [pc, #104]	; (80006f0 <BootLoader_Handle_GetCID_CMD+0x88>)
 8000688:	4413      	add	r3, r2
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	613b      	str	r3, [r7, #16]

	if(! BootLoader_Verify_CRC(&BL_Rx_Buffer[0], Command_Packet_Len - 4, Host_CRC))
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3b04      	subs	r3, #4
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	4619      	mov	r1, r3
 8000696:	4816      	ldr	r0, [pc, #88]	; (80006f0 <BootLoader_Handle_GetCID_CMD+0x88>)
 8000698:	f000 fbae 	bl	8000df8 <BootLoader_Verify_CRC>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d11a      	bne.n	80006d8 <BootLoader_Handle_GetCID_CMD+0x70>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Sucess \n");
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <BootLoader_Handle_GetCID_CMD+0x8c>)
 80006a4:	f7ff fea4 	bl	80003f0 <printmsg>

		/* Used to send the Command size to C / Python Script
		 * In Host device
		 */
		BootLoader_Send_ACK(pBuffer[0], 2);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fb76 	bl	8000da0 <BootLoader_Send_ACK>
		C_ID = Get_MCU_CID();
 80006b4:	f000 fbd2 	bl	8000e5c <Get_MCU_CID>
 80006b8:	4603      	mov	r3, r0
 80006ba:	81fb      	strh	r3, [r7, #14]
		printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n",C_ID, C_ID);
 80006bc:	89fb      	ldrh	r3, [r7, #14]
 80006be:	4619      	mov	r1, r3
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	461a      	mov	r2, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <BootLoader_Handle_GetCID_CMD+0x90>)
 80006c6:	f7ff fe93 	bl	80003f0 <printmsg>

		BootLoader_UART_Write_Data((u8* )&C_ID, 2);
 80006ca:	f107 030e 	add.w	r3, r7, #14
 80006ce:	2102      	movs	r1, #2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fd33 	bl	800113c <BootLoader_UART_Write_Data>
	}
	else{
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
		BootLoader_Send_NACK();
	}
}
 80006d6:	e004      	b.n	80006e2 <BootLoader_Handle_GetCID_CMD+0x7a>
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <BootLoader_Handle_GetCID_CMD+0x94>)
 80006da:	f7ff fe89 	bl	80003f0 <printmsg>
		BootLoader_Send_NACK();
 80006de:	f000 fb79 	bl	8000dd4 <BootLoader_Send_NACK>
}
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	08002aec 	.word	0x08002aec
 80006f0:	20000034 	.word	0x20000034
 80006f4:	08002a34 	.word	0x08002a34
 80006f8:	08002b1c 	.word	0x08002b1c
 80006fc:	08002ac8 	.word	0x08002ac8

08000700 <BootLoader_Handle_GetRDP_CMD>:
 * @brief Read the FLASH Protection Level
 * @Param  Pointer to Received data from Host
 * @retval Flash Protection Level (1 Byte)
 */
void BootLoader_Handle_GetRDP_CMD(u8 *pBuffer)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	u8 RDP_Value = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]
	printmsg("BL_DEBUG_MSG: BootLoader_Handle_GetRDP_CMDD \n");
 800070c:	481d      	ldr	r0, [pc, #116]	; (8000784 <BootLoader_Handle_GetRDP_CMD+0x84>)
 800070e:	f7ff fe6f 	bl	80003f0 <printmsg>

	/* Total Length of the Command Line */
	u32 Command_Packet_Len = BL_Rx_Buffer[0]+1;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <BootLoader_Handle_GetRDP_CMD+0x88>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]

	/* Extract the CRC from Host */
	u32 Host_CRC = *((u32 *) (BL_Rx_Buffer + Command_Packet_Len - 4) );
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	3b04      	subs	r3, #4
 800071e:	4a1a      	ldr	r2, [pc, #104]	; (8000788 <BootLoader_Handle_GetRDP_CMD+0x88>)
 8000720:	4413      	add	r3, r2
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	613b      	str	r3, [r7, #16]

	if(! BootLoader_Verify_CRC(&BL_Rx_Buffer[0], Command_Packet_Len - 4, Host_CRC))
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3b04      	subs	r3, #4
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	4619      	mov	r1, r3
 800072e:	4816      	ldr	r0, [pc, #88]	; (8000788 <BootLoader_Handle_GetRDP_CMD+0x88>)
 8000730:	f000 fb62 	bl	8000df8 <BootLoader_Verify_CRC>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d11a      	bne.n	8000770 <BootLoader_Handle_GetRDP_CMD+0x70>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Sucess \n");
 800073a:	4814      	ldr	r0, [pc, #80]	; (800078c <BootLoader_Handle_GetRDP_CMD+0x8c>)
 800073c:	f7ff fe58 	bl	80003f0 <printmsg>

		/* Used to send the Command size to C / Python Script
		 * In Host device
		 */
		BootLoader_Send_ACK(pBuffer[0], 1);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2101      	movs	r1, #1
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fb2a 	bl	8000da0 <BootLoader_Send_ACK>
		RDP_Value = Get_Flash_RDP_Level();
 800074c:	f000 fb94 	bl	8000e78 <Get_Flash_RDP_Level>
 8000750:	4603      	mov	r3, r0
 8000752:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n",RDP_Value, RDP_Value);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	4619      	mov	r1, r3
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	461a      	mov	r2, r3
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <BootLoader_Handle_GetRDP_CMD+0x90>)
 800075e:	f7ff fe47 	bl	80003f0 <printmsg>

		BootLoader_UART_Write_Data(&RDP_Value, 1);
 8000762:	f107 030f 	add.w	r3, r7, #15
 8000766:	2101      	movs	r1, #1
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fce7 	bl	800113c <BootLoader_UART_Write_Data>
	}
	else{
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
		BootLoader_Send_NACK();
	}
}
 800076e:	e004      	b.n	800077a <BootLoader_Handle_GetRDP_CMD+0x7a>
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <BootLoader_Handle_GetRDP_CMD+0x94>)
 8000772:	f7ff fe3d 	bl	80003f0 <printmsg>
		BootLoader_Send_NACK();
 8000776:	f000 fb2d 	bl	8000dd4 <BootLoader_Send_NACK>
}
 800077a:	bf00      	nop
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	08002b40 	.word	0x08002b40
 8000788:	20000034 	.word	0x20000034
 800078c:	08002a34 	.word	0x08002a34
 8000790:	08002b1c 	.word	0x08002b1c
 8000794:	08002ac8 	.word	0x08002ac8

08000798 <BootLoader_Handle_Go_CMD>:
 * @brief Jump Bootloader to Specrific Address
 * @Param  Pointer to Received data from Host
 * @retval Success or Fail (1 Byte)
**/
void BootLoader_Handle_Go_CMD(u8 *pBuffer)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	u32 Go_Address = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
	u8 Address_Valid 	= ADDRESS_VALID;
 80007a4:	2300      	movs	r3, #0
 80007a6:	72fb      	strb	r3, [r7, #11]
	u8 Address_Invalid	= ADDRESS_INVALID;
 80007a8:	2301      	movs	r3, #1
 80007aa:	72bb      	strb	r3, [r7, #10]
	void (*Jump_to_Address)(void);

	printmsg("BL_DEBUG_MSG: BootLoader_Handle_Go_CMD \n");
 80007ac:	482b      	ldr	r0, [pc, #172]	; (800085c <BootLoader_Handle_Go_CMD+0xc4>)
 80007ae:	f7ff fe1f 	bl	80003f0 <printmsg>
	/* Total Length of the Command Line */
	u32 Command_Packet_Len = BL_Rx_Buffer[0]+1;
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <BootLoader_Handle_Go_CMD+0xc8>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	3301      	adds	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]

	/* Extract the CRC from Host */
	u32 Host_CRC = *((u32 *) (BL_Rx_Buffer + Command_Packet_Len - 4) );
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	3b04      	subs	r3, #4
 80007be:	4a28      	ldr	r2, [pc, #160]	; (8000860 <BootLoader_Handle_Go_CMD+0xc8>)
 80007c0:	4413      	add	r3, r2
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	617b      	str	r3, [r7, #20]

	if(! BootLoader_Verify_CRC(&BL_Rx_Buffer[0], Command_Packet_Len - 4, Host_CRC))
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3b04      	subs	r3, #4
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4824      	ldr	r0, [pc, #144]	; (8000860 <BootLoader_Handle_Go_CMD+0xc8>)
 80007d0:	f000 fb12 	bl	8000df8 <BootLoader_Verify_CRC>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d136      	bne.n	8000848 <BootLoader_Handle_Go_CMD+0xb0>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Sucess \n");
 80007da:	4822      	ldr	r0, [pc, #136]	; (8000864 <BootLoader_Handle_Go_CMD+0xcc>)
 80007dc:	f7ff fe08 	bl	80003f0 <printmsg>

		/* Used to send the Command size to C / Python Script
		 * In Host device
		 */
		BootLoader_Send_ACK(pBuffer[0], 1);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2101      	movs	r1, #1
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fada 	bl	8000da0 <BootLoader_Send_ACK>

		/* Extract Go to Address From Host Application */
		Go_Address = *((volatile u32*)&pBuffer[2] );
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80007f2:	61fb      	str	r3, [r7, #28]
		printmsg("BL_DEBUG_MSG:GO addr: %#x\n",Go_Address);
 80007f4:	69f9      	ldr	r1, [r7, #28]
 80007f6:	481c      	ldr	r0, [pc, #112]	; (8000868 <BootLoader_Handle_Go_CMD+0xd0>)
 80007f8:	f7ff fdfa 	bl	80003f0 <printmsg>

		/* Check the address if it's valid or not
		 * (Not an OTP address or Peripheral Address )
		 */

		if( (Verify_Address(Go_Address) == ADDRESS_VALID))
 80007fc:	69f8      	ldr	r0, [r7, #28]
 80007fe:	f000 fb4f 	bl	8000ea0 <Verify_Address>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d115      	bne.n	8000834 <BootLoader_Handle_Go_CMD+0x9c>
		{
			/* Send 0x01 to host which is Valid Address Acknowledgment */
			BootLoader_UART_Write_Data(&Address_Valid, 1);
 8000808:	f107 030b 	add.w	r3, r7, #11
 800080c:	2101      	movs	r1, #1
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fc94 	bl	800113c <BootLoader_UART_Write_Data>


			u32 ResetHandler_Address = *(volatile u32*)(Go_Address + 4);
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	3304      	adds	r3, #4
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	613b      	str	r3, [r7, #16]

			/* Pointer to void Function to go to that address */
			Jump_to_Address = (void*)(ResetHandler_Address);
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	60fb      	str	r3, [r7, #12]

			printmsg("BL_DEBUG_MSG: jumping to go address! \n");
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <BootLoader_Handle_Go_CMD+0xd4>)
 8000822:	f7ff fde5 	bl	80003f0 <printmsg>

			/* Jump to User Application (Go_Address) */

			/* Disable IRQ */
			asm("MOV R0,#1");
 8000826:	f04f 0001 	mov.w	r0, #1
			asm("MSR PRIMASK,R0");
 800082a:	f380 8810 	msr	PRIMASK, r0
			Jump_to_Address();
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	4798      	blx	r3
	else{
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
		BootLoader_Send_NACK();

	}
}
 8000832:	e00e      	b.n	8000852 <BootLoader_Handle_Go_CMD+0xba>
		printmsg("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000834:	480e      	ldr	r0, [pc, #56]	; (8000870 <BootLoader_Handle_Go_CMD+0xd8>)
 8000836:	f7ff fddb 	bl	80003f0 <printmsg>
		BootLoader_UART_Write_Data(&Address_Invalid, 1);
 800083a:	f107 030a 	add.w	r3, r7, #10
 800083e:	2101      	movs	r1, #1
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fc7b 	bl	800113c <BootLoader_UART_Write_Data>
}
 8000846:	e004      	b.n	8000852 <BootLoader_Handle_Go_CMD+0xba>
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
 8000848:	480a      	ldr	r0, [pc, #40]	; (8000874 <BootLoader_Handle_Go_CMD+0xdc>)
 800084a:	f7ff fdd1 	bl	80003f0 <printmsg>
		BootLoader_Send_NACK();
 800084e:	f000 fac1 	bl	8000dd4 <BootLoader_Send_NACK>
}
 8000852:	bf00      	nop
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	08002b70 	.word	0x08002b70
 8000860:	20000034 	.word	0x20000034
 8000864:	08002a34 	.word	0x08002a34
 8000868:	08002b9c 	.word	0x08002b9c
 800086c:	08002bb8 	.word	0x08002bb8
 8000870:	08002be0 	.word	0x08002be0
 8000874:	08002ac8 	.word	0x08002ac8

08000878 <BootLoader_Handle_Flash_Mass_Erase_CMD>:

void BootLoader_Handle_Flash_Mass_Erase_CMD(u8 *pBuffer)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	u8 Erase_Status = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]

	printmsg("BL_DEBUG_MSG: BootLoader_Handle_Flash_Mass_Erase_CMD \n");
 8000884:	4826      	ldr	r0, [pc, #152]	; (8000920 <BootLoader_Handle_Flash_Mass_Erase_CMD+0xa8>)
 8000886:	f7ff fdb3 	bl	80003f0 <printmsg>
	/* Total Length of the Command Line */
	u32 Command_Packet_Len = BL_Rx_Buffer[0]+1;
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <BootLoader_Handle_Flash_Mass_Erase_CMD+0xac>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]

	/* Extract the CRC from Host */
	u32 Host_CRC = *((u32 *) (BL_Rx_Buffer + Command_Packet_Len - 4) );
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3b04      	subs	r3, #4
 8000896:	4a23      	ldr	r2, [pc, #140]	; (8000924 <BootLoader_Handle_Flash_Mass_Erase_CMD+0xac>)
 8000898:	4413      	add	r3, r2
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	613b      	str	r3, [r7, #16]

	if(! BootLoader_Verify_CRC(&BL_Rx_Buffer[0], Command_Packet_Len - 4, Host_CRC))
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3b04      	subs	r3, #4
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4619      	mov	r1, r3
 80008a6:	481f      	ldr	r0, [pc, #124]	; (8000924 <BootLoader_Handle_Flash_Mass_Erase_CMD+0xac>)
 80008a8:	f000 faa6 	bl	8000df8 <BootLoader_Verify_CRC>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d12d      	bne.n	800090e <BootLoader_Handle_Flash_Mass_Erase_CMD+0x96>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Sucess \n");
 80008b2:	481d      	ldr	r0, [pc, #116]	; (8000928 <BootLoader_Handle_Flash_Mass_Erase_CMD+0xb0>)
 80008b4:	f7ff fd9c 	bl	80003f0 <printmsg>

		/* Used to send the Command size to C / Python Script
		 * In Host device
		 */
		BootLoader_Send_ACK(pBuffer[0], 1);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2101      	movs	r1, #1
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fa6e 	bl	8000da0 <BootLoader_Send_ACK>
		printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3302      	adds	r3, #2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4619      	mov	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3303      	adds	r3, #3
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4815      	ldr	r0, [pc, #84]	; (800092c <BootLoader_Handle_Flash_Mass_Erase_CMD+0xb4>)
 80008d6:	f7ff fd8b 	bl	80003f0 <printmsg>

		vidGPIO_SetPinValue(GPIOG, PIN14, GPIO_VALUE_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	210e      	movs	r1, #14
 80008de:	4814      	ldr	r0, [pc, #80]	; (8000930 <BootLoader_Handle_Flash_Mass_Erase_CMD+0xb8>)
 80008e0:	f001 f9b6 	bl	8001c50 <vidGPIO_SetPinValue>
		Erase_Status = Execute_Flash_Mass_Erase();
 80008e4:	f000 fb36 	bl	8000f54 <Execute_Flash_Mass_Erase>
 80008e8:	4603      	mov	r3, r0
 80008ea:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",Erase_Status);
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	4619      	mov	r1, r3
 80008f0:	4810      	ldr	r0, [pc, #64]	; (8000934 <BootLoader_Handle_Flash_Mass_Erase_CMD+0xbc>)
 80008f2:	f7ff fd7d 	bl	80003f0 <printmsg>
		vidGPIO_SetPinValue(GPIOG, PIN14, GPIO_VALUE_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	210e      	movs	r1, #14
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <BootLoader_Handle_Flash_Mass_Erase_CMD+0xb8>)
 80008fc:	f001 f9a8 	bl	8001c50 <vidGPIO_SetPinValue>

		BootLoader_UART_Write_Data(&Erase_Status, 1);
 8000900:	f107 030f 	add.w	r3, r7, #15
 8000904:	2101      	movs	r1, #1
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fc18 	bl	800113c <BootLoader_UART_Write_Data>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
		BootLoader_Send_NACK();

	}
}
 800090c:	e004      	b.n	8000918 <BootLoader_Handle_Flash_Mass_Erase_CMD+0xa0>
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
 800090e:	480a      	ldr	r0, [pc, #40]	; (8000938 <BootLoader_Handle_Flash_Mass_Erase_CMD+0xc0>)
 8000910:	f7ff fd6e 	bl	80003f0 <printmsg>
		BootLoader_Send_NACK();
 8000914:	f000 fa5e 	bl	8000dd4 <BootLoader_Send_NACK>
}
 8000918:	bf00      	nop
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	08002c04 	.word	0x08002c04
 8000924:	20000034 	.word	0x20000034
 8000928:	08002a34 	.word	0x08002a34
 800092c:	08002c3c 	.word	0x08002c3c
 8000930:	40021800 	.word	0x40021800
 8000934:	08002c70 	.word	0x08002c70
 8000938:	08002ac8 	.word	0x08002ac8

0800093c <BootLoader_Handle_Flash_Erase_CMD>:
 * @brief Mass Erase or Sector Erase of user FLASH
 * @Param  Pointer to Received data from Host
 * @retval Success or Fail (1 Byte)
**/
void BootLoader_Handle_Flash_Erase_CMD(u8 *pBuffer)
	{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

		u8 Erase_Status = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	73fb      	strb	r3, [r7, #15]

		printmsg("BL_DEBUG_MSG: BootLoader_Handle_Flash_Erase_CMD \n");
 8000948:	482a      	ldr	r0, [pc, #168]	; (80009f4 <BootLoader_Handle_Flash_Erase_CMD+0xb8>)
 800094a:	f7ff fd51 	bl	80003f0 <printmsg>
		/* Total Length of the Command Line */
		u32 Command_Packet_Len = BL_Rx_Buffer[0]+1;
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <BootLoader_Handle_Flash_Erase_CMD+0xbc>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	3301      	adds	r3, #1
 8000954:	617b      	str	r3, [r7, #20]

		/* Extract the CRC from Host */
		u32 Host_CRC = *((u32 *) (BL_Rx_Buffer + Command_Packet_Len - 4) );
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3b04      	subs	r3, #4
 800095a:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <BootLoader_Handle_Flash_Erase_CMD+0xbc>)
 800095c:	4413      	add	r3, r2
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	613b      	str	r3, [r7, #16]

		if(! BootLoader_Verify_CRC(&BL_Rx_Buffer[0], Command_Packet_Len - 4, Host_CRC))
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3b04      	subs	r3, #4
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4619      	mov	r1, r3
 800096a:	4823      	ldr	r0, [pc, #140]	; (80009f8 <BootLoader_Handle_Flash_Erase_CMD+0xbc>)
 800096c:	f000 fa44 	bl	8000df8 <BootLoader_Verify_CRC>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d135      	bne.n	80009e2 <BootLoader_Handle_Flash_Erase_CMD+0xa6>
		{
			printmsg("BL_DEBUG_MSG: CheckSum Sucess \n");
 8000976:	4821      	ldr	r0, [pc, #132]	; (80009fc <BootLoader_Handle_Flash_Erase_CMD+0xc0>)
 8000978:	f7ff fd3a 	bl	80003f0 <printmsg>

			/* Used to send the Command size to C / Python Script
			 * In Host device
			 */
			BootLoader_Send_ACK(pBuffer[0], 1);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2101      	movs	r1, #1
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fa0c 	bl	8000da0 <BootLoader_Send_ACK>
	        printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3302      	adds	r3, #2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4619      	mov	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3303      	adds	r3, #3
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	4819      	ldr	r0, [pc, #100]	; (8000a00 <BootLoader_Handle_Flash_Erase_CMD+0xc4>)
 800099a:	f7ff fd29 	bl	80003f0 <printmsg>

	        vidGPIO_SetPinValue(GPIOG, PIN14, GPIO_VALUE_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	210e      	movs	r1, #14
 80009a2:	4818      	ldr	r0, [pc, #96]	; (8000a04 <BootLoader_Handle_Flash_Erase_CMD+0xc8>)
 80009a4:	f001 f954 	bl	8001c50 <vidGPIO_SetPinValue>
			Erase_Status = Execute_Flash_Erase(pBuffer[2], pBuffer[3]);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3302      	adds	r3, #2
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3303      	adds	r3, #3
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4610      	mov	r0, r2
 80009b8:	f000 faed 	bl	8000f96 <Execute_Flash_Erase>
 80009bc:	4603      	mov	r3, r0
 80009be:	73fb      	strb	r3, [r7, #15]
	        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",Erase_Status);
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	4619      	mov	r1, r3
 80009c4:	4810      	ldr	r0, [pc, #64]	; (8000a08 <BootLoader_Handle_Flash_Erase_CMD+0xcc>)
 80009c6:	f7ff fd13 	bl	80003f0 <printmsg>
	        vidGPIO_SetPinValue(GPIOG, PIN14, GPIO_VALUE_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210e      	movs	r1, #14
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <BootLoader_Handle_Flash_Erase_CMD+0xc8>)
 80009d0:	f001 f93e 	bl	8001c50 <vidGPIO_SetPinValue>


	        BootLoader_UART_Write_Data(&Erase_Status, 1);
 80009d4:	f107 030f 	add.w	r3, r7, #15
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fbae 	bl	800113c <BootLoader_UART_Write_Data>
		{
			printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
			BootLoader_Send_NACK();

		}
	}
 80009e0:	e004      	b.n	80009ec <BootLoader_Handle_Flash_Erase_CMD+0xb0>
			printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
 80009e2:	480a      	ldr	r0, [pc, #40]	; (8000a0c <BootLoader_Handle_Flash_Erase_CMD+0xd0>)
 80009e4:	f7ff fd04 	bl	80003f0 <printmsg>
			BootLoader_Send_NACK();
 80009e8:	f000 f9f4 	bl	8000dd4 <BootLoader_Send_NACK>
	}
 80009ec:	bf00      	nop
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08002c98 	.word	0x08002c98
 80009f8:	20000034 	.word	0x20000034
 80009fc:	08002a34 	.word	0x08002a34
 8000a00:	08002c3c 	.word	0x08002c3c
 8000a04:	40021800 	.word	0x40021800
 8000a08:	08002c70 	.word	0x08002c70
 8000a0c:	08002ac8 	.word	0x08002ac8

08000a10 <BootLoader_Handle_Mem_Write_CMD>:
 * 			Like (SRAM1, SRAM2, etc)
 * @Param  Pointer to Received data from Host
 * @retval 	Success or Fail (1 Byte)
**/
void BootLoader_Handle_Mem_Write_CMD(u8 *pBuffer)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	u8  Write_Status 		= 0x00;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]

	u8	 Payload_Len		= pBuffer[6];
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	799b      	ldrb	r3, [r3, #6]
 8000a20:	77fb      	strb	r3, [r7, #31]
	u32 Mem_Address		= *((u32*) (&pBuffer[2]) );
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000a28:	61bb      	str	r3, [r7, #24]


	printmsg("BL_DEBUG_MSG: BootLoader_Handle_Mem_Write_CMD \n");
 8000a2a:	4830      	ldr	r0, [pc, #192]	; (8000aec <BootLoader_Handle_Mem_Write_CMD+0xdc>)
 8000a2c:	f7ff fce0 	bl	80003f0 <printmsg>
	/* Total Length of the Command Line */
	u32 Command_Packet_Len = BL_Rx_Buffer[0]+1;
 8000a30:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <BootLoader_Handle_Mem_Write_CMD+0xe0>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]

	/* Extract the CRC from Host */
	u32 Host_CRC = *((u32 *) (BL_Rx_Buffer + Command_Packet_Len - 4) );
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	4a2c      	ldr	r2, [pc, #176]	; (8000af0 <BootLoader_Handle_Mem_Write_CMD+0xe0>)
 8000a3e:	4413      	add	r3, r2
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	613b      	str	r3, [r7, #16]

	if(! BootLoader_Verify_CRC(&BL_Rx_Buffer[0], Command_Packet_Len - 4, Host_CRC))
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	3b04      	subs	r3, #4
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4828      	ldr	r0, [pc, #160]	; (8000af0 <BootLoader_Handle_Mem_Write_CMD+0xe0>)
 8000a4e:	f000 f9d3 	bl	8000df8 <BootLoader_Verify_CRC>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d140      	bne.n	8000ada <BootLoader_Handle_Mem_Write_CMD+0xca>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Sucess \n");
 8000a58:	4826      	ldr	r0, [pc, #152]	; (8000af4 <BootLoader_Handle_Mem_Write_CMD+0xe4>)
 8000a5a:	f7ff fcc9 	bl	80003f0 <printmsg>

		/* Used to send the Command size to C / Python Script
		 * In Host device
		 */
		BootLoader_Send_ACK(pBuffer[0], 1);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2101      	movs	r1, #1
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 f99b 	bl	8000da0 <BootLoader_Send_ACK>
		printmsg("BL_DEBUG_MSG: mem write address : %#x\n",Mem_Address);
 8000a6a:	69b9      	ldr	r1, [r7, #24]
 8000a6c:	4822      	ldr	r0, [pc, #136]	; (8000af8 <BootLoader_Handle_Mem_Write_CMD+0xe8>)
 8000a6e:	f7ff fcbf 	bl	80003f0 <printmsg>

		if(Verify_Address(Mem_Address) == ADDRESS_VALID)
 8000a72:	69b8      	ldr	r0, [r7, #24]
 8000a74:	f000 fa14 	bl	8000ea0 <Verify_Address>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d121      	bne.n	8000ac2 <BootLoader_Handle_Mem_Write_CMD+0xb2>
		{
			printmsg("BL_DEBUG_MSG: valid mem write address\n");
 8000a7e:	481f      	ldr	r0, [pc, #124]	; (8000afc <BootLoader_Handle_Mem_Write_CMD+0xec>)
 8000a80:	f7ff fcb6 	bl	80003f0 <printmsg>

			vidGPIO_SetPinValue(GPIOG, PIN14, GPIO_VALUE_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	210e      	movs	r1, #14
 8000a88:	481d      	ldr	r0, [pc, #116]	; (8000b00 <BootLoader_Handle_Mem_Write_CMD+0xf0>)
 8000a8a:	f001 f8e1 	bl	8001c50 <vidGPIO_SetPinValue>

			Write_Status = Execute_Mem_Write(&pBuffer[7], Mem_Address, Payload_Len);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3307      	adds	r3, #7
 8000a92:	7ffa      	ldrb	r2, [r7, #31]
 8000a94:	69b9      	ldr	r1, [r7, #24]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fadf 	bl	800105a <Execute_Mem_Write>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	73fb      	strb	r3, [r7, #15]

			printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",Write_Status);
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4817      	ldr	r0, [pc, #92]	; (8000b04 <BootLoader_Handle_Mem_Write_CMD+0xf4>)
 8000aa6:	f7ff fca3 	bl	80003f0 <printmsg>

			vidGPIO_SetPinValue(GPIOG, PIN14, GPIO_VALUE_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	210e      	movs	r1, #14
 8000aae:	4814      	ldr	r0, [pc, #80]	; (8000b00 <BootLoader_Handle_Mem_Write_CMD+0xf0>)
 8000ab0:	f001 f8ce 	bl	8001c50 <vidGPIO_SetPinValue>

			BootLoader_UART_Write_Data(&Write_Status, 1);
 8000ab4:	f107 030f 	add.w	r3, r7, #15
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fb3e 	bl	800113c <BootLoader_UART_Write_Data>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
		BootLoader_Send_NACK();
	}

}
 8000ac0:	e010      	b.n	8000ae4 <BootLoader_Handle_Mem_Write_CMD+0xd4>
			printmsg("BL_DEBUG_MSG: Invalid Mem_Write Address \n");
 8000ac2:	4811      	ldr	r0, [pc, #68]	; (8000b08 <BootLoader_Handle_Mem_Write_CMD+0xf8>)
 8000ac4:	f7ff fc94 	bl	80003f0 <printmsg>
			Write_Status = ADDRESS_INVALID;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
			BootLoader_UART_Write_Data(&Write_Status, 1);
 8000acc:	f107 030f 	add.w	r3, r7, #15
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fb32 	bl	800113c <BootLoader_UART_Write_Data>
}
 8000ad8:	e004      	b.n	8000ae4 <BootLoader_Handle_Mem_Write_CMD+0xd4>
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <BootLoader_Handle_Mem_Write_CMD+0xfc>)
 8000adc:	f7ff fc88 	bl	80003f0 <printmsg>
		BootLoader_Send_NACK();
 8000ae0:	f000 f978 	bl	8000dd4 <BootLoader_Send_NACK>
}
 8000ae4:	bf00      	nop
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	08002ccc 	.word	0x08002ccc
 8000af0:	20000034 	.word	0x20000034
 8000af4:	08002a34 	.word	0x08002a34
 8000af8:	08002cfc 	.word	0x08002cfc
 8000afc:	08002d24 	.word	0x08002d24
 8000b00:	40021800 	.word	0x40021800
 8000b04:	08002c70 	.word	0x08002c70
 8000b08:	08002d4c 	.word	0x08002d4c
 8000b0c:	08002ac8 	.word	0x08002ac8

08000b10 <BootLoader_Handle_Enable_RW_Protection>:
 * @brief  Enable or Disable Read/Write Protection on Different Sectors on FLASH
 * @Param  Pointer to Received data from Host
 * @retval Success or Fail (1 Byte)
**/
void BootLoader_Handle_Enable_RW_Protection(u8 *pBuffer)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	u8 Status = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	73fb      	strb	r3, [r7, #15]

	printmsg("BL_DEBUG_MSG: BootLoader_Handle_Flash_Erase_CMD \n");
 8000b1c:	4820      	ldr	r0, [pc, #128]	; (8000ba0 <BootLoader_Handle_Enable_RW_Protection+0x90>)
 8000b1e:	f7ff fc67 	bl	80003f0 <printmsg>
	/* Total Length of the Command Line */
	u32 Command_Packet_Len = BL_Rx_Buffer[0]+1;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <BootLoader_Handle_Enable_RW_Protection+0x94>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]

	/* Extract the CRC from Host */
	u32 Host_CRC = *((u32 *) (BL_Rx_Buffer + Command_Packet_Len - 4) );
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3b04      	subs	r3, #4
 8000b2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <BootLoader_Handle_Enable_RW_Protection+0x94>)
 8000b30:	4413      	add	r3, r2
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	613b      	str	r3, [r7, #16]

	if(! BootLoader_Verify_CRC(&BL_Rx_Buffer[0], Command_Packet_Len - 4, Host_CRC))
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3b04      	subs	r3, #4
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4819      	ldr	r0, [pc, #100]	; (8000ba4 <BootLoader_Handle_Enable_RW_Protection+0x94>)
 8000b40:	f000 f95a 	bl	8000df8 <BootLoader_Verify_CRC>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d121      	bne.n	8000b8e <BootLoader_Handle_Enable_RW_Protection+0x7e>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Sucess \n");
 8000b4a:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <BootLoader_Handle_Enable_RW_Protection+0x98>)
 8000b4c:	f7ff fc50 	bl	80003f0 <printmsg>

		/* Used to send the Command size to C / Python Script
		 * In Host device
		*/
		BootLoader_Send_ACK(pBuffer[0], 1);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2101      	movs	r1, #1
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f922 	bl	8000da0 <BootLoader_Send_ACK>
		Status = Config_Flash_Sector_RW_Protection(pBuffer[2], pBuffer[3], 0);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3303      	adds	r3, #3
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f000 faa2 	bl	80010b6 <Config_Flash_Sector_RW_Protection>
 8000b72:	4603      	mov	r3, r0
 8000b74:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",Status);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480c      	ldr	r0, [pc, #48]	; (8000bac <BootLoader_Handle_Enable_RW_Protection+0x9c>)
 8000b7c:	f7ff fc38 	bl	80003f0 <printmsg>

        BootLoader_UART_Write_Data(&Status, 1);
 8000b80:	f107 030f 	add.w	r3, r7, #15
 8000b84:	2101      	movs	r1, #1
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fad8 	bl	800113c <BootLoader_UART_Write_Data>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
		BootLoader_Send_NACK();
	}

}
 8000b8c:	e004      	b.n	8000b98 <BootLoader_Handle_Enable_RW_Protection+0x88>
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
 8000b8e:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <BootLoader_Handle_Enable_RW_Protection+0xa0>)
 8000b90:	f7ff fc2e 	bl	80003f0 <printmsg>
		BootLoader_Send_NACK();
 8000b94:	f000 f91e 	bl	8000dd4 <BootLoader_Send_NACK>
}
 8000b98:	bf00      	nop
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	08002c98 	.word	0x08002c98
 8000ba4:	20000034 	.word	0x20000034
 8000ba8:	08002a34 	.word	0x08002a34
 8000bac:	08002c70 	.word	0x08002c70
 8000bb0:	08002ac8 	.word	0x08002ac8

08000bb4 <BootLoader_Handle_Mem_Read>:
 * @brief  Read the FLASH
 * @Param  Pointer to Received data from Host
 * @retval Memory Content of Desired Host Length
**/
void BootLoader_Handle_Mem_Read(u8 *pBuffer)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	volatile u32 Address = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
	u32 Val = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
	u32 ReadLength = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]

	printmsg("BL_DEBUG_MSG: BootLoader_Handle_Flash_Mass_Erase_CMD \n");
 8000bc8:	4820      	ldr	r0, [pc, #128]	; (8000c4c <BootLoader_Handle_Mem_Read+0x98>)
 8000bca:	f7ff fc11 	bl	80003f0 <printmsg>
	/* Total Length of the Command Line */
	u32 Command_Packet_Len = BL_Rx_Buffer[0]+1;
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <BootLoader_Handle_Mem_Read+0x9c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
	ReadLength = BL_Rx_Buffer[6];
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <BootLoader_Handle_Mem_Read+0x9c>)
 8000bd8:	799b      	ldrb	r3, [r3, #6]
 8000bda:	61fb      	str	r3, [r7, #28]

	/* Extract the CRC from Host */
	u32 Host_CRC = *((u32 *) (BL_Rx_Buffer + Command_Packet_Len - 4) );
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	3b04      	subs	r3, #4
 8000be0:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <BootLoader_Handle_Mem_Read+0x9c>)
 8000be2:	4413      	add	r3, r2
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	617b      	str	r3, [r7, #20]

	if(! BootLoader_Verify_CRC(&BL_Rx_Buffer[0], Command_Packet_Len - 4, Host_CRC))
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	3b04      	subs	r3, #4
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4817      	ldr	r0, [pc, #92]	; (8000c50 <BootLoader_Handle_Mem_Read+0x9c>)
 8000bf2:	f000 f901 	bl	8000df8 <BootLoader_Verify_CRC>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d11d      	bne.n	8000c38 <BootLoader_Handle_Mem_Read+0x84>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Sucess \n");
 8000bfc:	4815      	ldr	r0, [pc, #84]	; (8000c54 <BootLoader_Handle_Mem_Read+0xa0>)
 8000bfe:	f7ff fbf7 	bl	80003f0 <printmsg>

		/* Used to send the Command size to C / Python Script
		 * In Host device
		 */
		BootLoader_Send_ACK(pBuffer[0], ReadLength + 1);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4610      	mov	r0, r2
 8000c12:	f000 f8c5 	bl	8000da0 <BootLoader_Send_ACK>

		FLASH_Unlock_Sequence();
 8000c16:	f001 f945 	bl	8001ea4 <FLASH_Unlock_Sequence>

		Address = *(u32 *) &BL_Rx_Buffer[10];
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <BootLoader_Handle_Mem_Read+0xa4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	613b      	str	r3, [r7, #16]

		Val = *(u32 *)Address;
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]

		BootLoader_UART_Write_Data((u8*) &Val, ReadLength + 1);
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 fa83 	bl	800113c <BootLoader_UART_Write_Data>
	else{
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
		BootLoader_Send_NACK();
	}

}
 8000c36:	e004      	b.n	8000c42 <BootLoader_Handle_Mem_Read+0x8e>
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <BootLoader_Handle_Mem_Read+0xa8>)
 8000c3a:	f7ff fbd9 	bl	80003f0 <printmsg>
		BootLoader_Send_NACK();
 8000c3e:	f000 f8c9 	bl	8000dd4 <BootLoader_Send_NACK>
}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	08002c04 	.word	0x08002c04
 8000c50:	20000034 	.word	0x20000034
 8000c54:	08002a34 	.word	0x08002a34
 8000c58:	2000003e 	.word	0x2000003e
 8000c5c:	08002ac8 	.word	0x08002ac8

08000c60 <BootLoader_Handle_Read_Sector_Status>:
  * @brief  Read All Sectores Protection Status
  * @Param  Pointer to Received data from Host
  * @retval ALl Sectors Status (2 Bytes)
**/
void BootLoader_Handle_Read_Sector_Status(u8 *pBuffer)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	u32 Status = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]

	printmsg("BL_DEBUG_MSG: BootLoader_Handle_Flash_Erase_CMD \n");
 8000c6c:	481c      	ldr	r0, [pc, #112]	; (8000ce0 <BootLoader_Handle_Read_Sector_Status+0x80>)
 8000c6e:	f7ff fbbf 	bl	80003f0 <printmsg>
	/* Total Length of the Command Line */
	u32 Command_Packet_Len = BL_Rx_Buffer[0]+1;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <BootLoader_Handle_Read_Sector_Status+0x84>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]

	/* Extract the CRC from Host */
	u32 Host_CRC = *((u32 *) (BL_Rx_Buffer + Command_Packet_Len - 4) );
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3b04      	subs	r3, #4
 8000c7e:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <BootLoader_Handle_Read_Sector_Status+0x84>)
 8000c80:	4413      	add	r3, r2
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	613b      	str	r3, [r7, #16]

	if(! BootLoader_Verify_CRC(&BL_Rx_Buffer[0], Command_Packet_Len - 4, Host_CRC))
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3b04      	subs	r3, #4
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4815      	ldr	r0, [pc, #84]	; (8000ce4 <BootLoader_Handle_Read_Sector_Status+0x84>)
 8000c90:	f000 f8b2 	bl	8000df8 <BootLoader_Verify_CRC>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d118      	bne.n	8000ccc <BootLoader_Handle_Read_Sector_Status+0x6c>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Sucess \n");
 8000c9a:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <BootLoader_Handle_Read_Sector_Status+0x88>)
 8000c9c:	f7ff fba8 	bl	80003f0 <printmsg>

		/* Used to send the Command size to C / Python Script
		 * In Host device
		*/
		BootLoader_Send_ACK(pBuffer[0], 4);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f87a 	bl	8000da0 <BootLoader_Send_ACK>

		Status = Read_OptionByte_Protection_Status();
 8000cac:	f000 fa37 	bl	800111e <Read_OptionByte_Protection_Status>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60fb      	str	r3, [r7, #12]
        printmsg("BL_DEBUG_MSG: nWRP status: %#x\n",Status);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <BootLoader_Handle_Read_Sector_Status+0x8c>)
 8000cba:	f7ff fb99 	bl	80003f0 <printmsg>
        BootLoader_UART_Write_Data((u8*)&Status, 4);
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fa39 	bl	800113c <BootLoader_UART_Write_Data>
	else
	{
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
		BootLoader_Send_NACK();
	}
}
 8000cca:	e004      	b.n	8000cd6 <BootLoader_Handle_Read_Sector_Status+0x76>
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
 8000ccc:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <BootLoader_Handle_Read_Sector_Status+0x90>)
 8000cce:	f7ff fb8f 	bl	80003f0 <printmsg>
		BootLoader_Send_NACK();
 8000cd2:	f000 f87f 	bl	8000dd4 <BootLoader_Send_NACK>
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	08002c98 	.word	0x08002c98
 8000ce4:	20000034 	.word	0x20000034
 8000ce8:	08002a34 	.word	0x08002a34
 8000cec:	08002d78 	.word	0x08002d78
 8000cf0:	08002ac8 	.word	0x08002ac8

08000cf4 <BootLoader_Handle_Read_OTP>:
  * @brief  Read the OTP Content
  * @Param  Pointer to Received data from Host
  * @retval OTP Content
**/
void BootLoader_Handle_Read_OTP(u8 *pBuffer)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <BootLoader_Handle_Disable_RW_Protection>:
  * @brief  Disable Read Write Protection
  * @Param  Pointer to Received data from Host
  * @retval void
**/
void BootLoader_Handle_Disable_RW_Protection(u8 *pBuffer)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	u8 Status = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]

	printmsg("BL_DEBUG_MSG: BootLoader_Handle_Disable_RW_Protetction_CMD \n");
 8000d14:	481d      	ldr	r0, [pc, #116]	; (8000d8c <BootLoader_Handle_Disable_RW_Protection+0x84>)
 8000d16:	f7ff fb6b 	bl	80003f0 <printmsg>
	/* Total Length of the Command Line */
	u32 Command_Packet_Len = BL_Rx_Buffer[0]+1;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <BootLoader_Handle_Disable_RW_Protection+0x88>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]

	/* Extract the CRC from Host */
	u32 Host_CRC = *((u32 *) (BL_Rx_Buffer + Command_Packet_Len - 4) );
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3b04      	subs	r3, #4
 8000d26:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <BootLoader_Handle_Disable_RW_Protection+0x88>)
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	613b      	str	r3, [r7, #16]

	if(! BootLoader_Verify_CRC(&BL_Rx_Buffer[0], Command_Packet_Len - 4, Host_CRC))
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3b04      	subs	r3, #4
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4619      	mov	r1, r3
 8000d36:	4816      	ldr	r0, [pc, #88]	; (8000d90 <BootLoader_Handle_Disable_RW_Protection+0x88>)
 8000d38:	f000 f85e 	bl	8000df8 <BootLoader_Verify_CRC>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d11b      	bne.n	8000d7a <BootLoader_Handle_Disable_RW_Protection+0x72>
	{
		printmsg("BL_DEBUG_MSG: CheckSum Sucess \n");
 8000d42:	4814      	ldr	r0, [pc, #80]	; (8000d94 <BootLoader_Handle_Disable_RW_Protection+0x8c>)
 8000d44:	f7ff fb54 	bl	80003f0 <printmsg>

		/* Used to send the Command size to C / Python Script
		 * In Host device
		*/
		BootLoader_Send_ACK(pBuffer[0], 1);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f826 	bl	8000da0 <BootLoader_Send_ACK>
		Status = Config_Flash_Sector_RW_Protection(0, 0, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2100      	movs	r1, #0
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f000 f9ac 	bl	80010b6 <Config_Flash_Sector_RW_Protection>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",Status);
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	4619      	mov	r1, r3
 8000d66:	480c      	ldr	r0, [pc, #48]	; (8000d98 <BootLoader_Handle_Disable_RW_Protection+0x90>)
 8000d68:	f7ff fb42 	bl	80003f0 <printmsg>

        BootLoader_UART_Write_Data(&Status, 1);
 8000d6c:	f107 030f 	add.w	r3, r7, #15
 8000d70:	2101      	movs	r1, #1
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f9e2 	bl	800113c <BootLoader_UART_Write_Data>
	else
	{
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
		BootLoader_Send_NACK();
	}
}
 8000d78:	e004      	b.n	8000d84 <BootLoader_Handle_Disable_RW_Protection+0x7c>
		printmsg("BL_DEBUG_MSG: CheckSum Failed /n");
 8000d7a:	4808      	ldr	r0, [pc, #32]	; (8000d9c <BootLoader_Handle_Disable_RW_Protection+0x94>)
 8000d7c:	f7ff fb38 	bl	80003f0 <printmsg>
		BootLoader_Send_NACK();
 8000d80:	f000 f828 	bl	8000dd4 <BootLoader_Send_NACK>
}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	08002d98 	.word	0x08002d98
 8000d90:	20000034 	.word	0x20000034
 8000d94:	08002a34 	.word	0x08002a34
 8000d98:	08002c70 	.word	0x08002c70
 8000d9c:	08002ac8 	.word	0x08002ac8

08000da0 <BootLoader_Send_ACK>:


/********************** Helper Function to BootLoader ************************/
void BootLoader_Send_ACK(u8 Command, u8 Follow_Length)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
	/* Sending 2 Bytes: ACK and Follow Command Length */
	u8 ACK_Buf[2];
	ACK_Buf[0] = ACK;
 8000db0:	23a5      	movs	r3, #165	; 0xa5
 8000db2:	733b      	strb	r3, [r7, #12]
	ACK_Buf[1] = Follow_Length;
 8000db4:	79bb      	ldrb	r3, [r7, #6]
 8000db6:	737b      	strb	r3, [r7, #13]

	vidUSART_SendString(USART1, ACK_Buf, 2);
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <BootLoader_Send_ACK+0x30>)
 8000dc2:	f000 fc70 	bl	80016a6 <vidUSART_SendString>

}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40011000 	.word	0x40011000

08000dd4 <BootLoader_Send_NACK>:

void BootLoader_Send_NACK(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
	u8 Nack = BL_NACK;
 8000dda:	237f      	movs	r3, #127	; 0x7f
 8000ddc:	71fb      	strb	r3, [r7, #7]
	vidUSART_SendString(USART1, &Nack, 1);
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	2201      	movs	r2, #1
 8000de2:	4619      	mov	r1, r3
 8000de4:	4803      	ldr	r0, [pc, #12]	; (8000df4 <BootLoader_Send_NACK+0x20>)
 8000de6:	f000 fc5e 	bl	80016a6 <vidUSART_SendString>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40011000 	.word	0x40011000

08000df8 <BootLoader_Verify_CRC>:

u8 BootLoader_Verify_CRC(u8 *pData, u32 len, u32 crc_host)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
	u32 i = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
	u32 CRC_Value = 0xFF;
 8000e08:	23ff      	movs	r3, #255	; 0xff
 8000e0a:	61bb      	str	r3, [r7, #24]

	for(i=0; i < len; i++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	e00f      	b.n	8000e32 <BootLoader_Verify_CRC+0x3a>
	{
		u32 i_data = pData[i];
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	4413      	add	r3, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	617b      	str	r3, [r7, #20]
		CRC_Value = u32CRC_Accumulate(CRC_Engine, &i_data, 1);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2201      	movs	r2, #1
 8000e22:	4619      	mov	r1, r3
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <BootLoader_Verify_CRC+0x60>)
 8000e26:	f001 fce3 	bl	80027f0 <u32CRC_Accumulate>
 8000e2a:	61b8      	str	r0, [r7, #24]
	for(i=0; i < len; i++)
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d3eb      	bcc.n	8000e12 <BootLoader_Verify_CRC+0x1a>
	}


	/* Reset CRC Calculation Unit */
	vidCRC_Reset(CRC_Engine);
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <BootLoader_Verify_CRC+0x60>)
 8000e3c:	f001 fcfb 	bl	8002836 <vidCRC_Reset>
	if(CRC_Value == crc_host)
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d101      	bne.n	8000e4c <BootLoader_Verify_CRC+0x54>
	{
		return VERIFY_CRC_SUCCESS;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	e000      	b.n	8000e4e <BootLoader_Verify_CRC+0x56>
	}
	else
	{
		return VERIFY_CRC_FAIL;
 8000e4c:	2301      	movs	r3, #1
	}
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3720      	adds	r7, #32
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023000 	.word	0x40023000

08000e5c <Get_MCU_CID>:
 * In STM32F429, This Register holds the value of
 * Revision ID (Bit 31:16) and
 * Device ID (Bit 11:0) which is here 0x419
 *  */
u16 Get_MCU_CID(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	u16 CID = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	80fb      	strh	r3, [r7, #6]
	CID = u16Get_MCU_ID();
 8000e66:	f001 fcaf 	bl	80027c8 <u16Get_MCU_ID>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
	return CID;
 8000e6e:	88fb      	ldrh	r3, [r7, #6]

}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <Get_Flash_RDP_Level>:
 * Each 2 bytes for each bank
 * Getting Flash Level of protection by reading
 * the second byte in address 0x1FFFC000
 * */
u8 Get_Flash_RDP_Level(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
	u8 RDP_Status = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	71fb      	strb	r3, [r7, #7]

	volatile u32 *Ptr_to_OptionByteAddress = (u32*)0x1FFFC000;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <Get_Flash_RDP_Level+0x24>)
 8000e84:	603b      	str	r3, [r7, #0]
	RDP_Status = (u8)(*Ptr_to_OptionByteAddress >> 8);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	71fb      	strb	r3, [r7, #7]
	return RDP_Status;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	1fffc000 	.word	0x1fffc000

08000ea0 <Verify_Address>:
 * Invalid Adresses:
 * 		-CCM Memory (Accessed by D-Bus through CPU Only)
 * 		-Peripheral Addresses
*/
u8 Verify_Address(u32 Address)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

	if((Address >= SRAM1_BASE) && (Address <= SRAM1_END))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000eae:	d305      	bcc.n	8000ebc <Verify_Address+0x1c>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <Verify_Address+0x90>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d801      	bhi.n	8000ebc <Verify_Address+0x1c>
	{
		return ADDRESS_VALID;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e032      	b.n	8000f22 <Verify_Address+0x82>
	}

	else if((Address >= SRAM2_BASE) && (Address <= SRAM2_END))
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <Verify_Address+0x94>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d905      	bls.n	8000ed0 <Verify_Address+0x30>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	; (8000f38 <Verify_Address+0x98>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d801      	bhi.n	8000ed0 <Verify_Address+0x30>
	{
		return ADDRESS_VALID;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e028      	b.n	8000f22 <Verify_Address+0x82>
	}

	else if((Address >= SRAM3_BASE) && (Address <= SRAM3_END))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a1a      	ldr	r2, [pc, #104]	; (8000f3c <Verify_Address+0x9c>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d905      	bls.n	8000ee4 <Verify_Address+0x44>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a19      	ldr	r2, [pc, #100]	; (8000f40 <Verify_Address+0xa0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d801      	bhi.n	8000ee4 <Verify_Address+0x44>
	{
		return ADDRESS_VALID;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	e01e      	b.n	8000f22 <Verify_Address+0x82>
	}

	else if((Address >= FLASH_BASE) && (Address <= FLASH_END))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000eea:	d305      	bcc.n	8000ef8 <Verify_Address+0x58>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8000ef2:	d201      	bcs.n	8000ef8 <Verify_Address+0x58>
	{
		return ADDRESS_VALID;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e014      	b.n	8000f22 <Verify_Address+0x82>
	}

	else if((Address >= BKPSRAM_BASE) && (Address <= BKPSRAM_END))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <Verify_Address+0xa4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d905      	bls.n	8000f0c <Verify_Address+0x6c>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <Verify_Address+0xa8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d801      	bhi.n	8000f0c <Verify_Address+0x6c>
	{
		return ADDRESS_VALID;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e00a      	b.n	8000f22 <Verify_Address+0x82>
	}

	else if((Address >= SYSTEM_MEMORY_BASE) && (Address <= SYSTEM_MEMORY_END))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <Verify_Address+0xac>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d905      	bls.n	8000f20 <Verify_Address+0x80>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <Verify_Address+0xb0>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d801      	bhi.n	8000f20 <Verify_Address+0x80>
	{
		return ADDRESS_VALID;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e000      	b.n	8000f22 <Verify_Address+0x82>
	}
	else
	{
		return ADDRESS_INVALID;
 8000f20:	2301      	movs	r3, #1
	}
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	2001c000 	.word	0x2001c000
 8000f34:	2001bfff 	.word	0x2001bfff
 8000f38:	20020040 	.word	0x20020040
 8000f3c:	2001ffff 	.word	0x2001ffff
 8000f40:	20030000 	.word	0x20030000
 8000f44:	40023fff 	.word	0x40023fff
 8000f48:	40025000 	.word	0x40025000
 8000f4c:	1ffeffff 	.word	0x1ffeffff
 8000f50:	1fff7800 	.word	0x1fff7800

08000f54 <Execute_Flash_Mass_Erase>:

/* Used to Mass Erase the Flash
 * Both Bank 1 and Bank 2 */
u8 Execute_Flash_Mass_Erase(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
	Flash_Configurations Flash_Config = {0};
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
	u8 Status = 3;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	75fb      	strb	r3, [r7, #23]
	Flash_Config.Erase_Type	= FLASH_ERASE_MASS;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	603b      	str	r3, [r7, #0]
	Flash_Config.Banks		= FLASH_BANK_BOTH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	607b      	str	r3, [r7, #4]

	// Unlock Flash To Start Writing on it
	FLASH_Unlock_Sequence();
 8000f74:	f000 ff96 	bl	8001ea4 <FLASH_Unlock_Sequence>

	// Work in 2.7 -> 3.6V
	Flash_Config.Voltage_Range 	= FLASH_VOLATGE_RANGE_3;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]

	Status = (u8)FLASH_Mass_Erase(&Flash_Config);
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fa9c 	bl	80024bc <FLASH_Mass_Erase>
 8000f84:	4603      	mov	r3, r0
 8000f86:	75fb      	strb	r3, [r7, #23]

	// Lock the Flash again after writing on it
	FLASH_Lock_Sequence();
 8000f88:	f000 ffaa 	bl	8001ee0 <FLASH_Lock_Sequence>
	return Status;
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <Execute_Flash_Erase>:

/* In STM32F429 we have 2 Banks
 * Each bank has 12 sectors
*/
u8 Execute_Flash_Erase(u8 Sector_Number, u8 Number_of_Sectors)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b088      	sub	sp, #32
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	460a      	mov	r2, r1
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	71bb      	strb	r3, [r7, #6]


	Flash_Configurations Flash_Config = {0};
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
	u8 Remaining_Sectors = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	77fb      	strb	r3, [r7, #31]
	u8 Status = -1;
 8000fba:	23ff      	movs	r3, #255	; 0xff
 8000fbc:	77bb      	strb	r3, [r7, #30]


	if((Sector_Number == 0xFF ) || (Sector_Number <=23))
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2bff      	cmp	r3, #255	; 0xff
 8000fc2:	d002      	beq.n	8000fca <Execute_Flash_Erase+0x34>
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b17      	cmp	r3, #23
 8000fc8:	d842      	bhi.n	8001050 <Execute_Flash_Erase+0xba>
	{

		// Mass Erase To All FLash Content (BootLoader also will be erased)
		if(Sector_Number == 0xFF)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2bff      	cmp	r3, #255	; 0xff
 8000fce:	d104      	bne.n	8000fda <Execute_Flash_Erase+0x44>
		{
			Flash_Config.Erase_Type	= FLASH_ERASE_MASS;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
			Flash_Config.Banks		= FLASH_BANK_BOTH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e02b      	b.n	8001032 <Execute_Flash_Erase+0x9c>

		}
		// First Bank
		else if( (Sector_Number>=0) && (Sector_Number <=11) )
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b0b      	cmp	r3, #11
 8000fde:	d812      	bhi.n	8001006 <Execute_Flash_Erase+0x70>
		{
			//Calculating how many sectors need to be erased
			Remaining_Sectors = 11 - Sector_Number;
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f1c3 030b 	rsb	r3, r3, #11
 8000fe6:	77fb      	strb	r3, [r7, #31]
			if(Number_of_Sectors > Remaining_Sectors)
 8000fe8:	79ba      	ldrb	r2, [r7, #6]
 8000fea:	7ffb      	ldrb	r3, [r7, #31]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d901      	bls.n	8000ff4 <Execute_Flash_Erase+0x5e>
			{
				Number_of_Sectors 		= Remaining_Sectors;
 8000ff0:	7ffb      	ldrb	r3, [r7, #31]
 8000ff2:	71bb      	strb	r3, [r7, #6]
			}
			Flash_Config.Erase_Type		= FLASH_ERASE_SECTORS;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
			Flash_Config.Sector			= Sector_Number;	//Inintial Sector
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	613b      	str	r3, [r7, #16]
			Flash_Config.Num_of_Secotrs	= Number_of_Sectors;
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	617b      	str	r3, [r7, #20]

			Flash_Config.Banks			= FLASH_BANK_1;
 8001000:	2301      	movs	r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	e015      	b.n	8001032 <Execute_Flash_Erase+0x9c>
		}
		//Second Bank
		else if( (Sector_Number>=12) && (Sector_Number <=23) )
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b0b      	cmp	r3, #11
 800100a:	d912      	bls.n	8001032 <Execute_Flash_Erase+0x9c>
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b17      	cmp	r3, #23
 8001010:	d80f      	bhi.n	8001032 <Execute_Flash_Erase+0x9c>
		{
			//Calculating how many sectors need to be erased
			Remaining_Sectors = 23 - Sector_Number;
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f1c3 0317 	rsb	r3, r3, #23
 8001018:	77fb      	strb	r3, [r7, #31]
			if(Number_of_Sectors > Remaining_Sectors)
 800101a:	79ba      	ldrb	r2, [r7, #6]
 800101c:	7ffb      	ldrb	r3, [r7, #31]
 800101e:	429a      	cmp	r2, r3
 8001020:	d901      	bls.n	8001026 <Execute_Flash_Erase+0x90>
			{
				Number_of_Sectors = Remaining_Sectors;
 8001022:	7ffb      	ldrb	r3, [r7, #31]
 8001024:	71bb      	strb	r3, [r7, #6]
			}
			Flash_Config.Erase_Type		= FLASH_ERASE_SECTORS;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
			Flash_Config.Sector			= Sector_Number;	//Inintial Sector
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	613b      	str	r3, [r7, #16]
			Flash_Config.Num_of_Secotrs	= Number_of_Sectors;
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	617b      	str	r3, [r7, #20]


		}

		// Unlock Flash To Start Writing on it
		FLASH_Unlock_Sequence();
 8001032:	f000 ff37 	bl	8001ea4 <FLASH_Unlock_Sequence>

		// Work in 2.7 -> 3.6V
		Flash_Config.Voltage_Range 	= FLASH_VOLATGE_RANGE_3;
 8001036:	2302      	movs	r3, #2
 8001038:	61bb      	str	r3, [r7, #24]

		Status = (u8)FLASH_Erase(&Flash_Config);
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fe86 	bl	8001d50 <FLASH_Erase>
 8001044:	4603      	mov	r3, r0
 8001046:	77bb      	strb	r3, [r7, #30]

		// Lock the Flash again after writing on it
		FLASH_Lock_Sequence();
 8001048:	f000 ff4a 	bl	8001ee0 <FLASH_Lock_Sequence>
		return Status;
 800104c:	7fbb      	ldrb	r3, [r7, #30]
 800104e:	e000      	b.n	8001052 <Execute_Flash_Erase+0xbc>
	}
	return INVALID_SECTOR;
 8001050:	2304      	movs	r3, #4

}
 8001052:	4618      	mov	r0, r3
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <Execute_Mem_Write>:
 * NOTE: Maximum Packet = 255 bytes
 * So, it will be used more than 1 time
 * to flash the entire image
*/
u8 Execute_Mem_Write(u8 *pBuffer, u32 Mem_Address, u32 Len)
{
 800105a:	b590      	push	{r4, r7, lr}
 800105c:	b087      	sub	sp, #28
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
	uint8_t  Status = OK;
 8001066:	2300      	movs	r3, #0
 8001068:	75fb      	strb	r3, [r7, #23]
	uint32_t i = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]

	/* Unlock FLash to start writing on it */
	FLASH_Unlock_Sequence();
 800106e:	f000 ff19 	bl	8001ea4 <FLASH_Unlock_Sequence>

	/* Program the FLash Byte by Byte */
	for(i=0; i<Len; i++)
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	e013      	b.n	80010a0 <Execute_Mem_Write+0x46>
	{
		Status = FLASH_Program(FLASH_PROGRAM_TYPE_BYTE, Mem_Address + i, pBuffer[i]);
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	18d1      	adds	r1, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	f04f 0400 	mov.w	r4, #0
 800108c:	461a      	mov	r2, r3
 800108e:	4623      	mov	r3, r4
 8001090:	2000      	movs	r0, #0
 8001092:	f000 fe99 	bl	8001dc8 <FLASH_Program>
 8001096:	4603      	mov	r3, r0
 8001098:	75fb      	strb	r3, [r7, #23]
	for(i=0; i<Len; i++)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	3301      	adds	r3, #1
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d3e7      	bcc.n	8001078 <Execute_Mem_Write+0x1e>

	}
	FLASH_Lock_Sequence();
 80010a8:	f000 ff1a 	bl	8001ee0 <FLASH_Lock_Sequence>
	return Status;
 80010ac:	7dfb      	ldrb	r3, [r7, #23]

}
 80010ae:	4618      	mov	r0, r3
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}

080010b6 <Config_Flash_Sector_RW_Protection>:
 *		   Protection_Mode: 1->Write Protection , 2->R/W Protection
 *		   Disable_State  : 1->Disable R/W Protection to All Sectors
 *@Retval: 0 if Success
 * */
u8 Config_Flash_Sector_RW_Protection(u32 Sector_Number, u8 Protection_Mode, u8 Disable_State)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	70fb      	strb	r3, [r7, #3]
 80010c2:	4613      	mov	r3, r2
 80010c4:	70bb      	strb	r3, [r7, #2]
	if(Disable_State == 1)
 80010c6:	78bb      	ldrb	r3, [r7, #2]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d107      	bne.n	80010dc <Config_Flash_Sector_RW_Protection+0x26>
	{
		FLASH_Unlock_OB_Sequence();
 80010cc:	f000 fece 	bl	8001e6c <FLASH_Unlock_OB_Sequence>

		FLASH_Disable_Read_Write_Protection();
 80010d0:	f000 ff28 	bl	8001f24 <FLASH_Disable_Read_Write_Protection>

		FLASH_Lock_OB_Sequence();
 80010d4:	f000 ff16 	bl	8001f04 <FLASH_Lock_OB_Sequence>

		return 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	e01c      	b.n	8001116 <Config_Flash_Sector_RW_Protection+0x60>
	}

	if(Protection_Mode == 1)
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d10a      	bne.n	80010f8 <Config_Flash_Sector_RW_Protection+0x42>
	{
		FLASH_Unlock_OB_Sequence();
 80010e2:	f000 fec3 	bl	8001e6c <FLASH_Unlock_OB_Sequence>
		FLASH_Enable_Write_Protection(Sector_Number, Protection_Mode);
 80010e6:	78fb      	ldrb	r3, [r7, #3]
 80010e8:	4619      	mov	r1, r3
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f001 f8c4 	bl	8002278 <FLASH_Enable_Write_Protection>
		FLASH_Lock_OB_Sequence();
 80010f0:	f000 ff08 	bl	8001f04 <FLASH_Lock_OB_Sequence>
		return 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e00e      	b.n	8001116 <Config_Flash_Sector_RW_Protection+0x60>

	}

	else if (Protection_Mode == 2)
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d10a      	bne.n	8001114 <Config_Flash_Sector_RW_Protection+0x5e>
	{
		FLASH_Unlock_OB_Sequence();
 80010fe:	f000 feb5 	bl	8001e6c <FLASH_Unlock_OB_Sequence>
		FLASH_Enable_Read_Write_Protection(Sector_Number, Protection_Mode);
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 ff42 	bl	8001f90 <FLASH_Enable_Read_Write_Protection>
		FLASH_Lock_OB_Sequence();
 800110c:	f000 fefa 	bl	8001f04 <FLASH_Lock_OB_Sequence>
		return 0;
 8001110:	2300      	movs	r3, #0
 8001112:	e000      	b.n	8001116 <Config_Flash_Sector_RW_Protection+0x60>
	}
	return -1;
 8001114:	23ff      	movs	r3, #255	; 0xff
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <Read_OptionByte_Protection_Status>:


u32 Read_OptionByte_Protection_Status(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
	return u32FLASH_Read_Protection_Level();
 8001122:	f001 f885 	bl	8002230 <u32FLASH_Read_Protection_Level>
 8001126:	4603      	mov	r3, r0
}
 8001128:	4618      	mov	r0, r3
 800112a:	bd80      	pop	{r7, pc}

0800112c <Get_BootLoader_Version>:

u8 Get_BootLoader_Version(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	return (u8) BL_VERSION;
 8001130:	2310      	movs	r3, #16
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <BootLoader_UART_Write_Data>:

void BootLoader_UART_Write_Data(u8 *pBuffer, u32 Len)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]

		vidUSART_SendString(USART1, pBuffer, Len);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4803      	ldr	r0, [pc, #12]	; (800115c <BootLoader_UART_Write_Data+0x20>)
 8001150:	f000 faa9 	bl	80016a6 <vidUSART_SendString>


	//HAL_UART_Transmit(C_UART, pBuffer, Len, HAL_MAX_DELAY);
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40011000 	.word	0x40011000

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001198 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001164:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001166:	e003      	b.n	8001170 <LoopCopyDataInit>

08001168 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800116a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800116c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800116e:	3104      	adds	r1, #4

08001170 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001170:	480b      	ldr	r0, [pc, #44]	; (80011a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001174:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001176:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001178:	d3f6      	bcc.n	8001168 <CopyDataInit>
  ldr  r2, =_sbss
 800117a:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800117c:	e002      	b.n	8001184 <LoopFillZerobss>

0800117e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800117e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001180:	f842 3b04 	str.w	r3, [r2], #4

08001184 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001186:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001188:	d3f9      	bcc.n	800117e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800118a:	f000 f83b 	bl	8001204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118e:	f001 fb63 	bl	8002858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff f82b 	bl	80001ec <main>
  bx  lr    
 8001196:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001198:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800119c:	08002de0 	.word	0x08002de0
  ldr  r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011a4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80011a8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80011ac:	2000011c 	.word	0x2000011c

080011b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC_IRQHandler>

080011b2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <HardFault_Handler+0x4>

080011c6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <MemManage_Handler+0x4>

080011cc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <BusFault_Handler+0x4>

080011d2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <UsageFault_Handler+0x4>

080011d8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001208:	4a16      	ldr	r2, [pc, #88]	; (8001264 <SystemInit+0x60>)
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <SystemInit+0x60>)
 800120c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001218:	4a13      	ldr	r2, [pc, #76]	; (8001268 <SystemInit+0x64>)
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <SystemInit+0x64>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001224:	4b10      	ldr	r3, [pc, #64]	; (8001268 <SystemInit+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <SystemInit+0x64>)
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <SystemInit+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <SystemInit+0x64>)
 800123c:	4a0b      	ldr	r2, [pc, #44]	; (800126c <SystemInit+0x68>)
 800123e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001240:	4a09      	ldr	r2, [pc, #36]	; (8001268 <SystemInit+0x64>)
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <SystemInit+0x64>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <SystemInit+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001252:	f000 f80d 	bl	8001270 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001256:	4b03      	ldr	r3, [pc, #12]	; (8001264 <SystemInit+0x60>)
 8001258:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125c:	609a      	str	r2, [r3, #8]
#endif
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	40023800 	.word	0x40023800
 800126c:	24003010 	.word	0x24003010

08001270 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800127e:	4a36      	ldr	r2, [pc, #216]	; (8001358 <SetSysClock+0xe8>)
 8001280:	4b35      	ldr	r3, [pc, #212]	; (8001358 <SetSysClock+0xe8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800128a:	4b33      	ldr	r3, [pc, #204]	; (8001358 <SetSysClock+0xe8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3301      	adds	r3, #1
 8001298:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d103      	bne.n	80012a8 <SetSysClock+0x38>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012a6:	d1f0      	bne.n	800128a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <SetSysClock+0xe8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80012b4:	2301      	movs	r3, #1
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	e001      	b.n	80012be <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d102      	bne.n	80012ca <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <SetSysClock+0xe8>)
 80012c6:	4a25      	ldr	r2, [pc, #148]	; (800135c <SetSysClock+0xec>)
 80012c8:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80012ca:	4a23      	ldr	r2, [pc, #140]	; (8001358 <SetSysClock+0xe8>)
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <SetSysClock+0xe8>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <SetSysClock+0xf0>)
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <SetSysClock+0xf0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012e0:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80012e2:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <SetSysClock+0xe8>)
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <SetSysClock+0xe8>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80012ea:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <SetSysClock+0xe8>)
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <SetSysClock+0xe8>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012f4:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80012f6:	4a18      	ldr	r2, [pc, #96]	; (8001358 <SetSysClock+0xe8>)
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <SetSysClock+0xe8>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001300:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001302:	4a15      	ldr	r2, [pc, #84]	; (8001358 <SetSysClock+0xe8>)
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <SetSysClock+0xe8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800130c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800130e:	bf00      	nop
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <SetSysClock+0xe8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f9      	beq.n	8001310 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <SetSysClock+0xf4>)
 800131e:	f240 7205 	movw	r2, #1797	; 0x705
 8001322:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001324:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <SetSysClock+0xe8>)
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <SetSysClock+0xe8>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f023 0303 	bic.w	r3, r3, #3
 800132e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001330:	4a09      	ldr	r2, [pc, #36]	; (8001358 <SetSysClock+0xe8>)
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <SetSysClock+0xe8>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800133c:	bf00      	nop
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <SetSysClock+0xe8>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b08      	cmp	r3, #8
 8001348:	d1f9      	bne.n	800133e <SetSysClock+0xce>
    {
    }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	07405a08 	.word	0x07405a08
 8001360:	40007000 	.word	0x40007000
 8001364:	40023c00 	.word	0x40023c00

08001368 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 800136c:	4912      	ldr	r1, [pc, #72]	; (80013b8 <DMA1_Stream4_IRQHandler+0x50>)
 800136e:	4813      	ldr	r0, [pc, #76]	; (80013bc <DMA1_Stream4_IRQHandler+0x54>)
 8001370:	f000 f86e 	bl	8001450 <DMA_GetFlagStatus>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d01b      	beq.n	80013b2 <DMA1_Stream4_IRQHandler+0x4a>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 800137a:	2100      	movs	r1, #0
 800137c:	480f      	ldr	r0, [pc, #60]	; (80013bc <DMA1_Stream4_IRQHandler+0x54>)
 800137e:	f000 f84b 	bl	8001418 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 8001382:	490d      	ldr	r1, [pc, #52]	; (80013b8 <DMA1_Stream4_IRQHandler+0x50>)
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <DMA1_Stream4_IRQHandler+0x54>)
 8001386:	f000 f89f 	bl	80014c8 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <DMA1_Stream4_IRQHandler+0x58>)
 800138c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001390:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8001392:	bf00      	nop
 8001394:	490b      	ldr	r1, [pc, #44]	; (80013c4 <DMA1_Stream4_IRQHandler+0x5c>)
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <DMA1_Stream4_IRQHandler+0x60>)
 8001398:	f000 f8e4 	bl	8001564 <I2C_GetFlagStatus>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f8      	beq.n	8001394 <DMA1_Stream4_IRQHandler+0x2c>
    {
     // if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 80013a2:	2101      	movs	r1, #1
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <DMA1_Stream4_IRQHandler+0x60>)
 80013a6:	f000 f8bd 	bl	8001524 <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <DMA1_Stream4_IRQHandler+0x64>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
  }
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000020 	.word	0x20000020
 80013bc:	40026070 	.word	0x40026070
 80013c0:	2000000c 	.word	0x2000000c
 80013c4:	10000004 	.word	0x10000004
 80013c8:	40005c00 	.word	0x40005c00
 80013cc:	2000010c 	.word	0x2000010c

080013d0 <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 80013d4:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <DMA1_Stream2_IRQHandler+0x3c>)
 80013da:	f000 f839 	bl	8001450 <DMA_GetFlagStatus>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d010      	beq.n	8001406 <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 80013e4:	2101      	movs	r1, #1
 80013e6:	480a      	ldr	r0, [pc, #40]	; (8001410 <DMA1_Stream2_IRQHandler+0x40>)
 80013e8:	f000 f89c 	bl	8001524 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 80013ec:	2100      	movs	r1, #0
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <DMA1_Stream2_IRQHandler+0x3c>)
 80013f0:	f000 f812 	bl	8001418 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 80013f4:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <DMA1_Stream2_IRQHandler+0x3c>)
 80013fa:	f000 f865 	bl	80014c8 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <DMA1_Stream2_IRQHandler+0x44>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2200      	movs	r2, #0
 8001404:	801a      	strh	r2, [r3, #0]
  }
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40026040 	.word	0x40026040
 8001410:	40005c00 	.word	0x40005c00
 8001414:	20000114 	.word	0x20000114

08001418 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8001436:	e005      	b.n	8001444 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f023 0201 	bic.w	r2, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	601a      	str	r2, [r3, #0]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a15      	ldr	r2, [pc, #84]	; (80014bc <DMA_GetFlagStatus+0x6c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d802      	bhi.n	8001470 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <DMA_GetFlagStatus+0x70>)
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	e001      	b.n	8001474 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <DMA_GetFlagStatus+0x74>)
 8001472:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	e002      	b.n	800148c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001492:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001496:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80014a2:	2301      	movs	r3, #1
 80014a4:	75fb      	strb	r3, [r7, #23]
 80014a6:	e001      	b.n	80014ac <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	4002640f 	.word	0x4002640f
 80014c0:	40026000 	.word	0x40026000
 80014c4:	40026400 	.word	0x40026400

080014c8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a10      	ldr	r2, [pc, #64]	; (8001518 <DMA_ClearFlag+0x50>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d802      	bhi.n	80014e0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <DMA_ClearFlag+0x54>)
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	e001      	b.n	80014e4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <DMA_ClearFlag+0x58>)
 80014e2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80014f4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80014fc:	e006      	b.n	800150c <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001504:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	6093      	str	r3, [r2, #8]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	4002640f 	.word	0x4002640f
 800151c:	40026000 	.word	0x40026000
 8001520:	40026400 	.word	0x40026400

08001524 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001540:	b29a      	uxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8001546:	e007      	b.n	8001558 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001552:	b29a      	uxth	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	801a      	strh	r2, [r3, #0]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	0f1b      	lsrs	r3, r3, #28
 8001582:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800158a:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3314      	adds	r3, #20
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	e005      	b.n	80015a6 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	0c1b      	lsrs	r3, r3, #16
 800159e:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3318      	adds	r3, #24
 80015a4:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80015b2:	2301      	movs	r3, #1
 80015b4:	75fb      	strb	r3, [r7, #23]
 80015b6:	e001      	b.n	80015bc <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <vidUSART_Init>:
#include "USART_Init.h"



void vidUSART_Init(USART_REG* USARTx, USART_Config* Config)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
	u32 Temp = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
	vidUSART_InitReg(USARTx);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f8fd 	bl	80017d8 <vidUSART_InitReg>

	USARTx -> CR2 |= (u32)(Config -> StopBit);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	8912      	ldrh	r2, [r2, #8]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	611a      	str	r2, [r3, #16]

	Temp = (u32)(Config -> WordLength | Config -> Parity | Config -> Mode | Config -> OverSampling);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	88da      	ldrh	r2, [r3, #6]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	7a9b      	ldrb	r3, [r3, #10]
 80015fe:	4313      	orrs	r3, r2
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	8852      	ldrh	r2, [r2, #2]
 8001604:	4313      	orrs	r3, r2
 8001606:	60fb      	str	r3, [r7, #12]
	USARTx -> CR1 |= Temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60da      	str	r2, [r3, #12]


	USARTx -> BRR 	= (u32)Config -> BaudRate;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	889b      	ldrh	r3, [r3, #4]
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	609a      	str	r2, [r3, #8]

	//Enable Transmitting or Receiving or Both
	USARTx -> CR1  |= (u32)Config -> Mode;*/

	//Enable Interrupt Generation
	if((Config -> INT == EI_E) && (Config -> INT == CTSIE))
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	899b      	ldrh	r3, [r3, #12]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d10c      	bne.n	8001640 <vidUSART_Init+0x76>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	899b      	ldrh	r3, [r3, #12]
 800162a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800162e:	d107      	bne.n	8001640 <vidUSART_Init+0x76>
	{
		USARTx -> CR3 |= (u32)Config -> INT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	8992      	ldrh	r2, [r2, #12]
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	615a      	str	r2, [r3, #20]
 800163e:	e006      	b.n	800164e <vidUSART_Init+0x84>
	}
	else
	{
		USARTx -> CR1 |= (u32)Config -> INT;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	8992      	ldrh	r2, [r2, #12]
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60da      	str	r2, [r3, #12]
	}

	USARTx->CR2 &= ~(UART_CR2_LINEN | UART_CR2_CLKEN);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	611a      	str	r2, [r3, #16]
	USARTx->CR3 &= ~(UART_CR3_SCEN | UART_CR3_HDSEL | UART_CR3_IREN);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	615a      	str	r2, [r3, #20]


	//Enable USARTx Transmit/Recieve
	USARTx -> CR1  |= UE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60da      	str	r2, [r3, #12]
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <vidUSART_SendChar>:

void vidUSART_SendChar(USART_REG* USARTx, u8 u8Char)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	70fb      	strb	r3, [r7, #3]
	//Wait Till Tx Buffer Empty
	while(!(USARTx -> SR & TXE));
 8001686:	bf00      	nop
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f9      	beq.n	8001688 <vidUSART_SendChar+0xe>
	USARTx -> DR = u8Char;
 8001694:	78fa      	ldrb	r2, [r7, #3]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	605a      	str	r2, [r3, #4]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <vidUSART_SendString>:

void vidUSART_SendString(USART_REG* USARTx, u8* u8Str, u8 u8Size)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	4613      	mov	r3, r2
 80016b2:	71fb      	strb	r3, [r7, #7]
	u8 i =0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	75fb      	strb	r3, [r7, #23]
	if(0 != u8Str)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d011      	beq.n	80016e2 <vidUSART_SendString+0x3c>
	{
		for(i=0; i<u8Size; i++)
 80016be:	2300      	movs	r3, #0
 80016c0:	75fb      	strb	r3, [r7, #23]
 80016c2:	e00a      	b.n	80016da <vidUSART_SendString+0x34>
		{
			vidUSART_SendChar(USARTx, u8Str[i]);
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	4413      	add	r3, r2
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff ffd3 	bl	800167a <vidUSART_SendChar>
		for(i=0; i<u8Size; i++)
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	3301      	adds	r3, #1
 80016d8:	75fb      	strb	r3, [r7, #23]
 80016da:	7dfa      	ldrb	r2, [r7, #23]
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d3f0      	bcc.n	80016c4 <vidUSART_SendString+0x1e>
		}
	}
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <vidUSART_Receive>:


}*/

void vidUSART_Receive(USART_REG* USARTx, USART_Config* Config, u8 *pData, u16 Size)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b087      	sub	sp, #28
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	807b      	strh	r3, [r7, #2]
	u16 *Temp;
	volatile u16 TempSize = Size;
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	827b      	strh	r3, [r7, #18]
	while(TempSize > 0U)
 80016fc:	e062      	b.n	80017c4 <vidUSART_Receive+0xda>
	{
		TempSize--;
 80016fe:	8a7b      	ldrh	r3, [r7, #18]
 8001700:	b29b      	uxth	r3, r3
 8001702:	3b01      	subs	r3, #1
 8001704:	b29b      	uxth	r3, r3
 8001706:	827b      	strh	r3, [r7, #18]

		if(Config -> WordLength == Data_Bits_9)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	88db      	ldrh	r3, [r3, #6]
 800170c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001710:	d12f      	bne.n	8001772 <vidUSART_Receive+0x88>
		{
			//Wait Till Rx Buffer Not Empty to receive all data
			while((USARTx -> SR & RXNE) != RXNE);
 8001712:	bf00      	nop
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0320 	and.w	r3, r3, #32
 800171c:	2b20      	cmp	r3, #32
 800171e:	d1f9      	bne.n	8001714 <vidUSART_Receive+0x2a>

			//Disable TXE, PE, and ERR
			USARTx->CR1 &= ~(UART_CR1_RXNEIE | UART_CR1_PEIE | UART_CR1_TXEIE);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f423 72d0 	bic.w	r2, r3, #416	; 0x1a0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	60da      	str	r2, [r3, #12]
			USARTx->CR3 &= ~(UART_CR3_EIE);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f023 0201 	bic.w	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	615a      	str	r2, [r3, #20]

			Temp = (u16*)pData;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	617b      	str	r3, [r7, #20]

			if(Config -> Parity == NO)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10b      	bne.n	800175c <vidUSART_Receive+0x72>
			{
				*Temp = (u16)(USARTx -> DR & (u16)0x01FF);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	b29b      	uxth	r3, r3
 800174a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800174e:	b29a      	uxth	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	801a      	strh	r2, [r3, #0]
				pData+=1U;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3301      	adds	r3, #1
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	e033      	b.n	80017c4 <vidUSART_Receive+0xda>
			}
			else
			{
				*Temp = (u16)(USARTx -> DR & (u16)0x00FF);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	b29b      	uxth	r3, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	b29a      	uxth	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	801a      	strh	r2, [r3, #0]
				pData+=1U;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3301      	adds	r3, #1
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	e028      	b.n	80017c4 <vidUSART_Receive+0xda>

		}
		else
		{
			//Wait Till Rx Buffer Not Empty to receive all data
			while((USARTx -> SR & RXNE) != RXNE);
 8001772:	bf00      	nop
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b20      	cmp	r3, #32
 800177e:	d1f9      	bne.n	8001774 <vidUSART_Receive+0x8a>

			//Disable TXE, PE, and ERR
			USARTx->CR1 &= ~(UART_CR1_RXNEIE | UART_CR1_PEIE | UART_CR1_TXEIE);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f423 72d0 	bic.w	r2, r3, #416	; 0x1a0
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	60da      	str	r2, [r3, #12]
			USARTx->CR3 &= ~(UART_CR3_EIE);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f023 0201 	bic.w	r2, r3, #1
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	615a      	str	r2, [r3, #20]
			if(Config -> Parity == NO)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <vidUSART_Receive+0xc6>
			{
				*pData++ = (u8)(USARTx -> DR & (u8)0x00FF);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	6852      	ldr	r2, [r2, #4]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	e009      	b.n	80017c4 <vidUSART_Receive+0xda>

			}
			else
			{
				*pData++ = (u8)(USARTx -> DR & (u8)0x007F);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	6852      	ldr	r2, [r2, #4]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	701a      	strb	r2, [r3, #0]
	while(TempSize > 0U)
 80017c4:	8a7b      	ldrh	r3, [r7, #18]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d198      	bne.n	80016fe <vidUSART_Receive+0x14>

/*	//Wait Till Rx Buffer Not Empty to receive all data
	while((USARTx -> SR & RXNE) != RXNE);
	u8Char = (u8)(USARTx -> DR & (u8)0x007F);
	return u8Char;*/
}
 80017cc:	bf00      	nop
 80017ce:	371c      	adds	r7, #28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <vidUSART_InitReg>:
	return temp;

}

void vidUSART_InitReg(USART_REG* USARTx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	USARTx->SR 		= 0x000000C0;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	22c0      	movs	r2, #192	; 0xc0
 80017e4:	601a      	str	r2, [r3, #0]
	USARTx->BRR		= 0x00000000;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
	USARTx->CR1		= 0x00000000;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
	USARTx->CR2		= 0x00000000;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
	USARTx->CR3		= 0x00000000;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
	USARTx->GTPR	= 0x00000000;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <SysTick_Handler>:
	STK_LOAD = 0;
	STK_VAL = 0;
}

void SysTick_Handler (void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
	if(DELAY_X != 0)
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <SysTick_Handler+0x20>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <SysTick_Handler+0x16>
	{
		DELAY_X--;
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <SysTick_Handler+0x20>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	4a03      	ldr	r2, [pc, #12]	; (8001830 <SysTick_Handler+0x20>)
 8001824:	6013      	str	r3, [r2, #0]
	}
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	20000118 	.word	0x20000118

08001834 <_delay_ms>:

void _delay_ms(u32 u32Delay)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	DELAY_X = u32Delay;
 800183c:	4a06      	ldr	r2, [pc, #24]	; (8001858 <_delay_ms+0x24>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
	while(DELAY_X !=0);
 8001842:	bf00      	nop
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <_delay_ms+0x24>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1fb      	bne.n	8001844 <_delay_ms+0x10>
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	20000118 	.word	0x20000118

0800185c <vidSYSTICK_Init>:

void vidSYSTICK_Init(u32 u32Load)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	if(u32Load <=0 || u32Load > 0x00FFFFFF)
	{
		//Do Nothing
	}

	STK_LOAD = u32Load;
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <vidSYSTICK_Init+0x28>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
	STK_VAL  = 0x00;
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <vidSYSTICK_Init+0x2c>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
	STK_CTRL = 0x00000007;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <vidSYSTICK_Init+0x30>)
 8001872:	2207      	movs	r2, #7
 8001874:	601a      	str	r2, [r3, #0]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e014 	.word	0xe000e014
 8001888:	e000e018 	.word	0xe000e018
 800188c:	e000e010 	.word	0xe000e010

08001890 <vidRCC_Init>:
/*      Generate CLK 72Mhz & For USB 48MHz       */
/*Open CLK To PLLSAI & PLLI2S For Audio Interface*/
/*         and LCD Display with FREQ 72MHz       */
/*PLL Calculations:                              */
void vidRCC_Init(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

	SET_BIT(RCC -> CR, 0);   			//Enable High Speed Interal CLK  16MHz
 8001894:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <vidRCC_Init+0x28>)
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <vidRCC_Init+0x28>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6013      	str	r3, [r2, #0]
	while(!((RCC -> CR)& 0x00000002));	//Wait Until HSI is Stable
 80018a0:	bf00      	nop
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <vidRCC_Init+0x28>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f9      	beq.n	80018a2 <vidRCC_Init+0x12>
//	RCC -> PLLCFGR    |= 0x0300168A;
//	RCC -> PLLI2SCFGR |= 0x22001680;
//	RCC -> PLLSAICFGR |= 0x22001680;


}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40023800 	.word	0x40023800

080018bc <vidRCC_EnableClock>:


}

void vidRCC_EnableClock(u8 u8Peripheral)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	if ((u8Peripheral >= 0) && (u8Peripheral < 32))
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b1f      	cmp	r3, #31
 80018ca:	d809      	bhi.n	80018e0 <vidRCC_EnableClock+0x24>
	{
		//AHB1 Bus
		SET_BIT(RCC -> AHB1ENR, u8Peripheral);
 80018cc:	492e      	ldr	r1, [pc, #184]	; (8001988 <vidRCC_EnableClock+0xcc>)
 80018ce:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <vidRCC_EnableClock+0xcc>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	79fa      	ldrb	r2, [r7, #7]
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	4313      	orrs	r3, r2
 80018dc:	630b      	str	r3, [r1, #48]	; 0x30

	else
	{
		//Guard Else
	}
}
 80018de:	e04d      	b.n	800197c <vidRCC_EnableClock+0xc0>
	else if ((u8Peripheral >= 32) && (u8Peripheral < 64))
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	2b1f      	cmp	r3, #31
 80018e4:	d90f      	bls.n	8001906 <vidRCC_EnableClock+0x4a>
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b3f      	cmp	r3, #63	; 0x3f
 80018ea:	d80c      	bhi.n	8001906 <vidRCC_EnableClock+0x4a>
		u8Peripheral -=32;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	3b20      	subs	r3, #32
 80018f0:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC -> AHB2ENR, u8Peripheral);
 80018f2:	4925      	ldr	r1, [pc, #148]	; (8001988 <vidRCC_EnableClock+0xcc>)
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <vidRCC_EnableClock+0xcc>)
 80018f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f8:	79fa      	ldrb	r2, [r7, #7]
 80018fa:	2001      	movs	r0, #1
 80018fc:	fa00 f202 	lsl.w	r2, r0, r2
 8001900:	4313      	orrs	r3, r2
 8001902:	634b      	str	r3, [r1, #52]	; 0x34
 8001904:	e03a      	b.n	800197c <vidRCC_EnableClock+0xc0>
	else if ((u8Peripheral >= 64) && (u8Peripheral < 128))
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b3f      	cmp	r3, #63	; 0x3f
 800190a:	d910      	bls.n	800192e <vidRCC_EnableClock+0x72>
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0c      	blt.n	800192e <vidRCC_EnableClock+0x72>
		u8Peripheral -=64;
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	3b40      	subs	r3, #64	; 0x40
 8001918:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC -> AHB3ENR, u8Peripheral);
 800191a:	491b      	ldr	r1, [pc, #108]	; (8001988 <vidRCC_EnableClock+0xcc>)
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <vidRCC_EnableClock+0xcc>)
 800191e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001920:	79fa      	ldrb	r2, [r7, #7]
 8001922:	2001      	movs	r0, #1
 8001924:	fa00 f202 	lsl.w	r2, r0, r2
 8001928:	4313      	orrs	r3, r2
 800192a:	638b      	str	r3, [r1, #56]	; 0x38
 800192c:	e026      	b.n	800197c <vidRCC_EnableClock+0xc0>
	else if((u8Peripheral >=128) && (u8Peripheral < 160))
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	da0f      	bge.n	8001956 <vidRCC_EnableClock+0x9a>
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b9f      	cmp	r3, #159	; 0x9f
 800193a:	d80c      	bhi.n	8001956 <vidRCC_EnableClock+0x9a>
		u8Peripheral -=128;
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	3b80      	subs	r3, #128	; 0x80
 8001940:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC -> APB1ENR, u8Peripheral);
 8001942:	4911      	ldr	r1, [pc, #68]	; (8001988 <vidRCC_EnableClock+0xcc>)
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <vidRCC_EnableClock+0xcc>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	2001      	movs	r0, #1
 800194c:	fa00 f202 	lsl.w	r2, r0, r2
 8001950:	4313      	orrs	r3, r2
 8001952:	640b      	str	r3, [r1, #64]	; 0x40
 8001954:	e012      	b.n	800197c <vidRCC_EnableClock+0xc0>
	else if((u8Peripheral >=160) && (u8Peripheral <192))
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b9f      	cmp	r3, #159	; 0x9f
 800195a:	d90f      	bls.n	800197c <vidRCC_EnableClock+0xc0>
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2bbf      	cmp	r3, #191	; 0xbf
 8001960:	d80c      	bhi.n	800197c <vidRCC_EnableClock+0xc0>
		u8Peripheral -=160;
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	3360      	adds	r3, #96	; 0x60
 8001966:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC -> APB2ENR, u8Peripheral);
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <vidRCC_EnableClock+0xcc>)
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <vidRCC_EnableClock+0xcc>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	79fa      	ldrb	r2, [r7, #7]
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	4313      	orrs	r3, r2
 8001978:	644b      	str	r3, [r1, #68]	; 0x44
}
 800197a:	e7ff      	b.n	800197c <vidRCC_EnableClock+0xc0>
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40023800 	.word	0x40023800

0800198c <vidNVIC_Init>:

#include "NVIC_Reg.h"
#include "NVIC_Init.h"

void vidNVIC_Init(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	AIRCR = 0x5FA0000; // SET GROUP 2 BIT, SUB 2 BIT
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <vidNVIC_Init+0x20>)
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <vidNVIC_Init+0x24>)
 8001994:	601a      	str	r2, [r3, #0]

	AIRCR |= 0x600;
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <vidNVIC_Init+0x20>)
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <vidNVIC_Init+0x20>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80019a0:	6013      	str	r3, [r2, #0]
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed0c 	.word	0xe000ed0c
 80019b0:	05fa0000 	.word	0x05fa0000

080019b4 <vidGPIO_Init_Reg>:

#include "GPIO_REG.h"
#include "GPIO_Init.h"

void vidGPIO_Init_Reg(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
	GPIOA -> MODER   = 0xA8000000;
 80019b8:	4b7c      	ldr	r3, [pc, #496]	; (8001bac <vidGPIO_Init_Reg+0x1f8>)
 80019ba:	f04f 4228 	mov.w	r2, #2818572288	; 0xa8000000
 80019be:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER   = 0x00000280;
 80019c0:	4b7b      	ldr	r3, [pc, #492]	; (8001bb0 <vidGPIO_Init_Reg+0x1fc>)
 80019c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80019c6:	601a      	str	r2, [r3, #0]
	GPIOC -> MODER   = 0x00000000;
 80019c8:	4b7a      	ldr	r3, [pc, #488]	; (8001bb4 <vidGPIO_Init_Reg+0x200>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
	GPIOD -> MODER   = 0x00000000;
 80019ce:	4b7a      	ldr	r3, [pc, #488]	; (8001bb8 <vidGPIO_Init_Reg+0x204>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
	GPIOE -> MODER   = 0x00000000;
 80019d4:	4b79      	ldr	r3, [pc, #484]	; (8001bbc <vidGPIO_Init_Reg+0x208>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
	GPIOF -> MODER   = 0x00000000;
 80019da:	4b79      	ldr	r3, [pc, #484]	; (8001bc0 <vidGPIO_Init_Reg+0x20c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
	GPIOG -> MODER   = 0x00000000;
 80019e0:	4b78      	ldr	r3, [pc, #480]	; (8001bc4 <vidGPIO_Init_Reg+0x210>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
	GPIOH -> MODER   = 0x00000000;
 80019e6:	4b78      	ldr	r3, [pc, #480]	; (8001bc8 <vidGPIO_Init_Reg+0x214>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

	GPIOA -> OTYPER  = 0x00000000;
 80019ec:	4b6f      	ldr	r3, [pc, #444]	; (8001bac <vidGPIO_Init_Reg+0x1f8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
	GPIOB -> OTYPER  = 0x00000000;
 80019f2:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <vidGPIO_Init_Reg+0x1fc>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
	GPIOC -> OTYPER  = 0x00000000;
 80019f8:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <vidGPIO_Init_Reg+0x200>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	605a      	str	r2, [r3, #4]
	GPIOD -> OTYPER  = 0x00000000;
 80019fe:	4b6e      	ldr	r3, [pc, #440]	; (8001bb8 <vidGPIO_Init_Reg+0x204>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	605a      	str	r2, [r3, #4]
	GPIOE -> OTYPER  = 0x00000000;
 8001a04:	4b6d      	ldr	r3, [pc, #436]	; (8001bbc <vidGPIO_Init_Reg+0x208>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
	GPIOF -> OTYPER  = 0x00000000;
 8001a0a:	4b6d      	ldr	r3, [pc, #436]	; (8001bc0 <vidGPIO_Init_Reg+0x20c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]
	GPIOG -> OTYPER  = 0x00000000;
 8001a10:	4b6c      	ldr	r3, [pc, #432]	; (8001bc4 <vidGPIO_Init_Reg+0x210>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
	GPIOH -> OTYPER  = 0x00000000;
 8001a16:	4b6c      	ldr	r3, [pc, #432]	; (8001bc8 <vidGPIO_Init_Reg+0x214>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	605a      	str	r2, [r3, #4]

	GPIOA -> OSPEEDR = 0x0C000000;
 8001a1c:	4b63      	ldr	r3, [pc, #396]	; (8001bac <vidGPIO_Init_Reg+0x1f8>)
 8001a1e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001a22:	609a      	str	r2, [r3, #8]
	GPIOB -> OSPEEDR = 0x000000C0;
 8001a24:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <vidGPIO_Init_Reg+0x1fc>)
 8001a26:	22c0      	movs	r2, #192	; 0xc0
 8001a28:	609a      	str	r2, [r3, #8]
	GPIOC -> OSPEEDR = 0x00000000;
 8001a2a:	4b62      	ldr	r3, [pc, #392]	; (8001bb4 <vidGPIO_Init_Reg+0x200>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
	GPIOD -> OSPEEDR = 0x00000000;
 8001a30:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <vidGPIO_Init_Reg+0x204>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
	GPIOE -> OSPEEDR = 0x00000000;
 8001a36:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <vidGPIO_Init_Reg+0x208>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
	GPIOF -> OSPEEDR = 0x00000000;
 8001a3c:	4b60      	ldr	r3, [pc, #384]	; (8001bc0 <vidGPIO_Init_Reg+0x20c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
	GPIOG -> OSPEEDR = 0x00000000;
 8001a42:	4b60      	ldr	r3, [pc, #384]	; (8001bc4 <vidGPIO_Init_Reg+0x210>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
	GPIOH -> OSPEEDR = 0x00000000;
 8001a48:	4b5f      	ldr	r3, [pc, #380]	; (8001bc8 <vidGPIO_Init_Reg+0x214>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]

	GPIOA -> PUPDR   = 0x64000000;
 8001a4e:	4b57      	ldr	r3, [pc, #348]	; (8001bac <vidGPIO_Init_Reg+0x1f8>)
 8001a50:	f04f 42c8 	mov.w	r2, #1677721600	; 0x64000000
 8001a54:	60da      	str	r2, [r3, #12]
	GPIOB -> PUPDR   = 0x00001000;
 8001a56:	4b56      	ldr	r3, [pc, #344]	; (8001bb0 <vidGPIO_Init_Reg+0x1fc>)
 8001a58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a5c:	60da      	str	r2, [r3, #12]
	GPIOC -> PUPDR   = 0x00000000;
 8001a5e:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <vidGPIO_Init_Reg+0x200>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
	GPIOD -> PUPDR   = 0x00000000;
 8001a64:	4b54      	ldr	r3, [pc, #336]	; (8001bb8 <vidGPIO_Init_Reg+0x204>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
	GPIOE -> PUPDR   = 0x00000000;
 8001a6a:	4b54      	ldr	r3, [pc, #336]	; (8001bbc <vidGPIO_Init_Reg+0x208>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
	GPIOF -> PUPDR   = 0x00000000;
 8001a70:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <vidGPIO_Init_Reg+0x20c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
	GPIOG -> PUPDR   = 0x00000000;
 8001a76:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <vidGPIO_Init_Reg+0x210>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
	GPIOH -> PUPDR   = 0x00000000;
 8001a7c:	4b52      	ldr	r3, [pc, #328]	; (8001bc8 <vidGPIO_Init_Reg+0x214>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]

	GPIOA -> IDR     = 0x00000000;
 8001a82:	4b4a      	ldr	r3, [pc, #296]	; (8001bac <vidGPIO_Init_Reg+0x1f8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
	GPIOB -> IDR     = 0x00000000;
 8001a88:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <vidGPIO_Init_Reg+0x1fc>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
	GPIOC -> IDR     = 0x00000000;
 8001a8e:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <vidGPIO_Init_Reg+0x200>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
	GPIOD -> IDR     = 0x00000000;
 8001a94:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <vidGPIO_Init_Reg+0x204>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
	GPIOE -> IDR     = 0x00000000;
 8001a9a:	4b48      	ldr	r3, [pc, #288]	; (8001bbc <vidGPIO_Init_Reg+0x208>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
	GPIOF -> IDR     = 0x00000000;
 8001aa0:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <vidGPIO_Init_Reg+0x20c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
	GPIOG -> IDR     = 0x00000000;
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <vidGPIO_Init_Reg+0x210>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
	GPIOH -> IDR     = 0x00000000;
 8001aac:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <vidGPIO_Init_Reg+0x214>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]

	GPIOA -> ODR	 = 0x00000000;
 8001ab2:	4b3e      	ldr	r3, [pc, #248]	; (8001bac <vidGPIO_Init_Reg+0x1f8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR	 = 0x00000000;
 8001ab8:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <vidGPIO_Init_Reg+0x1fc>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
	GPIOC -> ODR	 = 0x00000000;
 8001abe:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <vidGPIO_Init_Reg+0x200>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
	GPIOD -> ODR	 = 0x00000000;
 8001ac4:	4b3c      	ldr	r3, [pc, #240]	; (8001bb8 <vidGPIO_Init_Reg+0x204>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
	GPIOE -> ODR	 = 0x00000000;
 8001aca:	4b3c      	ldr	r3, [pc, #240]	; (8001bbc <vidGPIO_Init_Reg+0x208>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
	GPIOF -> ODR	 = 0x00000000;
 8001ad0:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <vidGPIO_Init_Reg+0x20c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	615a      	str	r2, [r3, #20]
	GPIOG -> ODR	 = 0x00000000;
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <vidGPIO_Init_Reg+0x210>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
	GPIOH -> ODR	 = 0x00000000;
 8001adc:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <vidGPIO_Init_Reg+0x214>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	615a      	str	r2, [r3, #20]

	GPIOA -> BSRRL 	 = 0x00000000;
 8001ae2:	4b32      	ldr	r3, [pc, #200]	; (8001bac <vidGPIO_Init_Reg+0x1f8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	831a      	strh	r2, [r3, #24]
	GPIOB -> BSRRL 	 = 0x00000000;
 8001ae8:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <vidGPIO_Init_Reg+0x1fc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	831a      	strh	r2, [r3, #24]
	GPIOC -> BSRRL 	 = 0x00000000;
 8001aee:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <vidGPIO_Init_Reg+0x200>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	831a      	strh	r2, [r3, #24]
	GPIOD -> BSRRL 	 = 0x00000000;
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <vidGPIO_Init_Reg+0x204>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	831a      	strh	r2, [r3, #24]
	GPIOE -> BSRRL 	 = 0x00000000;
 8001afa:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <vidGPIO_Init_Reg+0x208>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	831a      	strh	r2, [r3, #24]
	GPIOF -> BSRRL 	 = 0x00000000;
 8001b00:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <vidGPIO_Init_Reg+0x20c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	831a      	strh	r2, [r3, #24]
	GPIOG -> BSRRL 	 = 0x00000000;
 8001b06:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <vidGPIO_Init_Reg+0x210>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	831a      	strh	r2, [r3, #24]
	GPIOH -> BSRRL 	 = 0x00000000;
 8001b0c:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <vidGPIO_Init_Reg+0x214>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	831a      	strh	r2, [r3, #24]

	GPIOA -> BSSRH 	 = 0x00000000;
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <vidGPIO_Init_Reg+0x1f8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	835a      	strh	r2, [r3, #26]
	GPIOB -> BSSRH 	 = 0x00000000;
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <vidGPIO_Init_Reg+0x1fc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	835a      	strh	r2, [r3, #26]
	GPIOC -> BSSRH 	 = 0x00000000;
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <vidGPIO_Init_Reg+0x200>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	835a      	strh	r2, [r3, #26]
	GPIOD -> BSSRH 	 = 0x00000000;
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <vidGPIO_Init_Reg+0x204>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	835a      	strh	r2, [r3, #26]
	GPIOE -> BSSRH 	 = 0x00000000;
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <vidGPIO_Init_Reg+0x208>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	835a      	strh	r2, [r3, #26]
	GPIOF -> BSSRH 	 = 0x00000000;
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <vidGPIO_Init_Reg+0x20c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	835a      	strh	r2, [r3, #26]
	GPIOG -> BSSRH 	 = 0x00000000;
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <vidGPIO_Init_Reg+0x210>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	835a      	strh	r2, [r3, #26]
	GPIOH -> BSSRH 	 = 0x00000000;
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <vidGPIO_Init_Reg+0x214>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	835a      	strh	r2, [r3, #26]


	GPIOA -> AFRL    = 0000000000;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <vidGPIO_Init_Reg+0x1f8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
	GPIOB -> AFRL    = 0000000000;
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <vidGPIO_Init_Reg+0x1fc>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	621a      	str	r2, [r3, #32]
	GPIOC -> AFRL    = 0000000000;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <vidGPIO_Init_Reg+0x200>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
	GPIOD -> AFRL    = 0000000000;
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <vidGPIO_Init_Reg+0x204>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	621a      	str	r2, [r3, #32]
	GPIOE -> AFRL    = 0000000000;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <vidGPIO_Init_Reg+0x208>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
	GPIOF -> AFRL    = 0000000000;
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <vidGPIO_Init_Reg+0x20c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
	GPIOG -> AFRL    = 0000000000;
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <vidGPIO_Init_Reg+0x210>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	621a      	str	r2, [r3, #32]
	GPIOH -> AFRL    = 0000000000;
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <vidGPIO_Init_Reg+0x214>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	621a      	str	r2, [r3, #32]

	GPIOA -> AFRH    = 0000000000;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <vidGPIO_Init_Reg+0x1f8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOB -> AFRH    = 0000000000;
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <vidGPIO_Init_Reg+0x1fc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC -> AFRH    = 0000000000;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <vidGPIO_Init_Reg+0x200>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOD -> AFRH    = 0000000000;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <vidGPIO_Init_Reg+0x204>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOE -> AFRH    = 0000000000;
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <vidGPIO_Init_Reg+0x208>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOF -> AFRH    = 0000000000;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <vidGPIO_Init_Reg+0x20c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOG -> AFRH    = 0000000000;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <vidGPIO_Init_Reg+0x210>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOH -> AFRH    = 0000000000;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <vidGPIO_Init_Reg+0x214>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020c00 	.word	0x40020c00
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40021400 	.word	0x40021400
 8001bc4:	40021800 	.word	0x40021800
 8001bc8:	40021c00 	.word	0x40021c00

08001bcc <vidGPIO_Init>:



void vidGPIO_Init(GPIO_REG* GPIOx, GPIO_PIN_INIT* val)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	//Guard to Select pin from 0 to 15
	if((val -> GPIO_PIN >= 0) && (val -> GPIO_PIN <= 15))
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	d832      	bhi.n	8001c44 <vidGPIO_Init+0x78>
	{
		GPIOx -> MODER 	 |= (((u32)val -> GPIO_MODE)  << ((val -> GPIO_PIN)*2));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	791b      	ldrb	r3, [r3, #4]
 8001be6:	4619      	mov	r1, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	601a      	str	r2, [r3, #0]
		GPIOx -> OSPEEDR |= (((u32)val -> GPIO_SPEED) << ((val -> GPIO_PIN)*2));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	799b      	ldrb	r3, [r3, #6]
 8001c00:	4619      	mov	r1, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	609a      	str	r2, [r3, #8]
		GPIOx -> OTYPER  |= (((u32)val -> GPIO_OUT)   << (val  -> GPIO_PIN));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	795b      	ldrb	r3, [r3, #5]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	605a      	str	r2, [r3, #4]
		GPIOx -> PUPDR   |= (((u32)val -> GPIO_PULL)  << ((val -> GPIO_PIN)*2));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	79db      	ldrb	r3, [r3, #7]
 8001c32:	4619      	mov	r1, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	60da      	str	r2, [r3, #12]

	}
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <vidGPIO_SetPinValue>:
{
	GPIOx -> ODR = (u16Val & 0xFFFF);
}

void vidGPIO_SetPinValue(GPIO_REG* GPIOx, u8 u8Pin, GPIO_VALUE xVal)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	70bb      	strb	r3, [r7, #2]
	if((u8Pin >= 0) && (u8Pin <= 15))
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	2b0f      	cmp	r3, #15
 8001c64:	d821      	bhi.n	8001caa <vidGPIO_SetPinValue+0x5a>
	{
		switch(xVal)
 8001c66:	78bb      	ldrb	r3, [r7, #2]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d010      	beq.n	8001c8e <vidGPIO_SetPinValue+0x3e>
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d000      	beq.n	8001c72 <vidGPIO_SetPinValue+0x22>
			SET_BIT(GPIOx -> BSSRH, u8Pin);
			break;

		default:
			//do nothing
			break;
 8001c70:	e01b      	b.n	8001caa <vidGPIO_SetPinValue+0x5a>
			SET_BIT(GPIOx -> BSRRL, u8Pin);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	8b1b      	ldrh	r3, [r3, #24]
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b21b      	sxth	r3, r3
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	831a      	strh	r2, [r3, #24]
			break;
 8001c8c:	e00d      	b.n	8001caa <vidGPIO_SetPinValue+0x5a>
			SET_BIT(GPIOx -> BSSRH, u8Pin);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	8b5b      	ldrh	r3, [r3, #26]
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	835a      	strh	r2, [r3, #26]
			break;
 8001ca8:	bf00      	nop
		}
	}
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <vidGPIO_AlternateFunction>:
		TOG_BIT(GPIOx -> ODR, u8Pin);
	}
}

void vidGPIO_AlternateFunction(GPIO_REG* GPIOx, u8 u8Pin, u8 u8AF)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	70fb      	strb	r3, [r7, #3]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	70bb      	strb	r3, [r7, #2]
	if((u8Pin >= 0) && (u8Pin <= 15))
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d820      	bhi.n	8001d0e <vidGPIO_AlternateFunction+0x58>
	{
		if(u8Pin <= PIN7)
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	2b07      	cmp	r3, #7
 8001cd0:	d80a      	bhi.n	8001ce8 <vidGPIO_AlternateFunction+0x32>
		{
			GPIOx -> AFRL |= (u8AF << (u8Pin *4));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	78b9      	ldrb	r1, [r7, #2]
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	0092      	lsls	r2, r2, #2
 8001cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	621a      	str	r2, [r3, #32]
		{
			u8Pin -=0x08;
			GPIOx -> AFRH |= (u8AF << (u8Pin*4));
		}
	}
}
 8001ce6:	e012      	b.n	8001d0e <vidGPIO_AlternateFunction+0x58>
		else if((u8Pin >=PIN8) && (u8Pin <=PIN15))
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	2b07      	cmp	r3, #7
 8001cec:	d90f      	bls.n	8001d0e <vidGPIO_AlternateFunction+0x58>
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d80c      	bhi.n	8001d0e <vidGPIO_AlternateFunction+0x58>
			u8Pin -=0x08;
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	3b08      	subs	r3, #8
 8001cf8:	70fb      	strb	r3, [r7, #3]
			GPIOx -> AFRH |= (u8AF << (u8Pin*4));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	78b9      	ldrb	r1, [r7, #2]
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	0092      	lsls	r2, r2, #2
 8001d04:	fa01 f202 	lsl.w	r2, r1, r2
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <u8GPIO_GetPinValue>:

u8 u8GPIO_GetPinValue(GPIO_REG* GPIOx, u8 u8Pin)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b085      	sub	sp, #20
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	70fb      	strb	r3, [r7, #3]
	u8 value = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
	if((u8Pin >= 0) && (u8Pin <= 15))
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d808      	bhi.n	8001d42 <u8GPIO_GetPinValue+0x28>
		{
			value = GET_BIT(GPIOx -> IDR, u8Pin);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	73fb      	strb	r3, [r7, #15]
		}
	return value;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <FLASH_Erase>:
 * @brief 	Erase Flash Funtion
 * @param 	Pointer to Flash Configuration Struct
 * @retval  Return_Status
 */
Return_Status FLASH_Erase(Flash_Configurations *xFlashConfig)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	u32 i = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
	//FLASH_Unlock();

	/* Erase BANK by BANK or BOTH BANKS */
	if(xFlashConfig -> Erase_Type == FLASH_ERASE_MASS)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d102      	bne.n	8001d6a <FLASH_Erase+0x1a>
	{
		FLASH_Mass_Erase(xFlashConfig);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fba9 	bl	80024bc <FLASH_Mass_Erase>
	}

	/* Wait till Last Operation  */
	if(FLASH_Wait_Till_Operation_End() == OK)
 8001d6a:	f000 f861 	bl	8001e30 <FLASH_Wait_Till_Operation_End>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d122      	bne.n	8001dba <FLASH_Erase+0x6a>
	{

		/* Erase By Sectors */


			for(i=(xFlashConfig ->Sector) ; i< (xFlashConfig->Num_of_Secotrs + xFlashConfig ->Sector); i++)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	e014      	b.n	8001da6 <FLASH_Erase+0x56>
			{
				FLASH_Sector_Erase((u8)(xFlashConfig->Voltage_Range), i);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	68f9      	ldr	r1, [r7, #12]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fbe9 	bl	800255c <FLASH_Sector_Erase>

				if(FLASH_Wait_Till_Operation_End() == OK)
 8001d8a:	f000 f851 	bl	8001e30 <FLASH_Wait_Till_Operation_End>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <FLASH_Erase+0x50>
				{
					FLASH->CR &= ~(FLASH_CR_SNB_CLR | FLASH_CR_SER);
 8001d94:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <FLASH_Erase+0x74>)
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <FLASH_Erase+0x74>)
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001d9e:	6113      	str	r3, [r2, #16]
			for(i=(xFlashConfig ->Sector) ; i< (xFlashConfig->Num_of_Secotrs + xFlashConfig ->Sector); i++)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3301      	adds	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	441a      	add	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d8e2      	bhi.n	8001d7c <FLASH_Erase+0x2c>

				}
			}

		vidFLASH_FlushCaches();
 8001db6:	f000 fc31 	bl	800261c <vidFLASH_FlushCaches>
	}
	return OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <FLASH_Program>:
 *			either byte, half word, word or double word
 * @retval Return_Status
 */

Return_Status FLASH_Program(u32 u32Programming_Type, u32 u32Address, u64 u64Data)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	e9c7 2300 	strd	r2, r3, [r7]
	if(FLASH_Wait_Till_Operation_End() == OK)
 8001dd6:	f000 f82b 	bl	8001e30 <FLASH_Wait_Till_Operation_End>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d120      	bne.n	8001e22 <FLASH_Program+0x5a>
	{
		if(u32Programming_Type == FLASH_PROGRAM_TYPE_BYTE)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d105      	bne.n	8001df2 <FLASH_Program+0x2a>
		{
			/* Program Byte (8-Bit) at the given address */
			vidFLASH_ProgramByte(u32Address, (u8) u64Data);
 8001de6:	783b      	ldrb	r3, [r7, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	68b8      	ldr	r0, [r7, #8]
 8001dec:	f000 fc5c 	bl	80026a8 <vidFLASH_ProgramByte>
 8001df0:	e019      	b.n	8001e26 <FLASH_Program+0x5e>
		}
		else if (u32Programming_Type == FLASH_PROGRAM_TYPE_HALF_WORD)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <FLASH_Program+0x3c>
		{
			/* Program Half Word (16-Bit) at the given address */
			vidFLASH_ProgramHalfWord(u32Address, (u16) u64Data);
 8001df8:	883b      	ldrh	r3, [r7, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	68b8      	ldr	r0, [r7, #8]
 8001dfe:	f000 fc75 	bl	80026ec <vidFLASH_ProgramHalfWord>
 8001e02:	e010      	b.n	8001e26 <FLASH_Program+0x5e>
		}
		else if (u32Programming_Type == FLASH_PROGRAM_TYPE_WORD)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d105      	bne.n	8001e16 <FLASH_Program+0x4e>
		{
			/* Program Word (32-Bit) at the given address */
			vidFLASH_ProgramWord(u32Address, (u32) u64Data);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	68b8      	ldr	r0, [r7, #8]
 8001e10:	f000 fc8e 	bl	8002730 <vidFLASH_ProgramWord>
 8001e14:	e007      	b.n	8001e26 <FLASH_Program+0x5e>
		}
		else
		{
			/* Program Double Word (64-Bit) at the given address */
			vidFLASH_ProgramDoubleWord(u32Address, (u64) u64Data);
 8001e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e1a:	68b8      	ldr	r0, [r7, #8]
 8001e1c:	f000 fca8 	bl	8002770 <vidFLASH_ProgramDoubleWord>
 8001e20:	e001      	b.n	8001e26 <FLASH_Program+0x5e>
		}

	}
	else
	{
		return NOK;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <FLASH_Program+0x60>
	}
	return OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <FLASH_Wait_Till_Operation_End>:
 * @brief 	Wait till Flash End Operation Funtion
 * @param 	None
 * @retval Return Status (If ok -> OK)
 */
Return_Status FLASH_Wait_Till_Operation_End(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
	/* Wait For Flash to end its ongoing operation */
	while((FLASH -> SR & FLASH_SR_BSY_FLAG) != 0);
 8001e34:	bf00      	nop
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <FLASH_Wait_Till_Operation_End+0x38>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f9      	bne.n	8001e36 <FLASH_Wait_Till_Operation_End+0x6>

	/* Check if End of operation Flag is reset or not */
	if((FLASH -> SR & FLASH_SR_EOP_FLAG) != 0)
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <FLASH_Wait_Till_Operation_End+0x38>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <FLASH_Wait_Till_Operation_End+0x2a>
	{
		/* Reset it by writing 1 on its bit */
		FLASH -> SR |= FLASH_SR_EOP_FLAG;
 8001e4e:	4a06      	ldr	r2, [pc, #24]	; (8001e68 <FLASH_Wait_Till_Operation_End+0x38>)
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <FLASH_Wait_Till_Operation_End+0x38>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	60d3      	str	r3, [r2, #12]
	}

	return OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <FLASH_Unlock_OB_Sequence>:
 * @brief 	Flash Unlock Option Bytes Function
 * @param 	None
 * @retval Return Status (If ok -> OK)
 */
Return_Status FLASH_Unlock_OB_Sequence(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
	if((FLASH -> OPTCR & FLASH_OPTCR_OPTLOCK) != 0)
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <FLASH_Unlock_OB_Sequence+0x2c>)
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <FLASH_Unlock_OB_Sequence+0x20>
	{
		FLASH -> OPTKEYR = FLASH_OB_KEY1;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <FLASH_Unlock_OB_Sequence+0x2c>)
 8001e7e:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <FLASH_Unlock_OB_Sequence+0x30>)
 8001e80:	609a      	str	r2, [r3, #8]
		FLASH -> OPTKEYR = FLASH_OB_KEY2;
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <FLASH_Unlock_OB_Sequence+0x2c>)
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <FLASH_Unlock_OB_Sequence+0x34>)
 8001e86:	609a      	str	r2, [r3, #8]
	}
	else
	{
		return NOK;
	}
	return OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <FLASH_Unlock_OB_Sequence+0x22>
		return NOK;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	40023c00 	.word	0x40023c00
 8001e9c:	08192a3b 	.word	0x08192a3b
 8001ea0:	4c5d6e7f 	.word	0x4c5d6e7f

08001ea4 <FLASH_Unlock_Sequence>:
 * @brief 	Flash Unlock Function
 * @param 	None
 * @retval Return Status (If ok -> OK)
 */
Return_Status FLASH_Unlock_Sequence(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
	if((FLASH-> CR & FLASH_CR_LOCK) != 0)
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <FLASH_Unlock_Sequence+0x30>)
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	da0b      	bge.n	8001ec8 <FLASH_Unlock_Sequence+0x24>
	{
		FLASH->KEYR = FLASH_KEY1;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <FLASH_Unlock_Sequence+0x30>)
 8001eb2:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <FLASH_Unlock_Sequence+0x34>)
 8001eb4:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = FLASH_KEY2;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <FLASH_Unlock_Sequence+0x30>)
 8001eb8:	4a08      	ldr	r2, [pc, #32]	; (8001edc <FLASH_Unlock_Sequence+0x38>)
 8001eba:	605a      	str	r2, [r3, #4]

		if((FLASH-> CR & FLASH_CR_LOCK) != 0)
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <FLASH_Unlock_Sequence+0x30>)
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	da01      	bge.n	8001ec8 <FLASH_Unlock_Sequence+0x24>
		{
			return NOK;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <FLASH_Unlock_Sequence+0x26>
		}
	}
	return OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	40023c00 	.word	0x40023c00
 8001ed8:	45670123 	.word	0x45670123
 8001edc:	cdef89ab 	.word	0xcdef89ab

08001ee0 <FLASH_Lock_Sequence>:
 * @brief 	Flash lock Function
 * @param 	None
 * @retval Return Status (If ok -> OK)
 */
Return_Status FLASH_Lock_Sequence(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <FLASH_Lock_Sequence+0x20>)
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <FLASH_Lock_Sequence+0x20>)
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001eee:	6113      	str	r3, [r2, #16]

	if((FLASH->CR & FLASH_CR_LOCK) == 1)
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <FLASH_Lock_Sequence+0x20>)
 8001ef2:	691b      	ldr	r3, [r3, #16]
		return OK;
	else
		return NOK;
 8001ef4:	2301      	movs	r3, #1
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40023c00 	.word	0x40023c00

08001f04 <FLASH_Lock_OB_Sequence>:
 * @brief  Flash lock Option Bytes Function
 * @param  None
 * @retval Return Status (If ok -> OK)
 */
Return_Status FLASH_Lock_OB_Sequence(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001f08:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <FLASH_Lock_OB_Sequence+0x1c>)
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <FLASH_Lock_OB_Sequence+0x1c>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6153      	str	r3, [r2, #20]
	return OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <FLASH_Disable_Read_Write_Protection>:
 * @brief  Flash Disable Read Write Protection Function
 * @param  None
 * @retval Return Status (If ok -> OK)
 */
Return_Status FLASH_Disable_Read_Write_Protection(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
	/* Wait For Flash to end its ongoing operation */
	while((FLASH -> SR & FLASH_SR_BSY_FLAG) != 0);
 8001f28:	bf00      	nop
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <FLASH_Disable_Read_Write_Protection+0x68>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f9      	bne.n	8001f2a <FLASH_Disable_Read_Write_Protection+0x6>


	if((FLASH -> OPTCR & FLASH_OPTCR_SPRMOD) == 1)
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <FLASH_Disable_Read_Write_Protection+0x68>)
 8001f38:	695b      	ldr	r3, [r3, #20]
		/* Wait For Flash to end its ongoing operation */
		while((FLASH -> SR & FLASH_SR_BSY_FLAG) != 0);

		return OK;
	}
	else if ((FLASH -> OPTCR & FLASH_OPTCR_SPRMOD) == 0)
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <FLASH_Disable_Read_Write_Protection+0x68>)
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db1e      	blt.n	8001f80 <FLASH_Disable_Read_Write_Protection+0x5c>
		/* nWRP used as Write Protection */
		/* nWRP Bits should be 1 to disable the Write Protection */

		/* Clear Protection, Put all bits to 1 after reset SPRMOD Bit */
		/* Here we have 2 Option Bytes, so OPTCR For first Option Byte */
		FLASH -> OPTCR  |= (0xFFF << 16);
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <FLASH_Disable_Read_Write_Protection+0x68>)
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <FLASH_Disable_Read_Write_Protection+0x68>)
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	f043 637f 	orr.w	r3, r3, #267386880	; 0xff00000
 8001f4c:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8001f50:	6153      	str	r3, [r2, #20]

		/* OPTCR1 For the second Option Byte */
		FLASH -> OPTCR1 |= (0xFFF << 16);
 8001f52:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <FLASH_Disable_Read_Write_Protection+0x68>)
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <FLASH_Disable_Read_Write_Protection+0x68>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f043 637f 	orr.w	r3, r3, #267386880	; 0xff00000
 8001f5c:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8001f60:	6193      	str	r3, [r2, #24]

		/* Set OPSTRT (Option Start Bit) */
		FLASH -> OPTCR |= FLASH_OPTCR_OPTSRTR;
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <FLASH_Disable_Read_Write_Protection+0x68>)
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <FLASH_Disable_Read_Write_Protection+0x68>)
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	6153      	str	r3, [r2, #20]

		/* Wait For Flash to end its ongoing operation */
		while((FLASH -> SR & FLASH_SR_BSY_FLAG) != 0);
 8001f6e:	bf00      	nop
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <FLASH_Disable_Read_Write_Protection+0x68>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f9      	bne.n	8001f70 <FLASH_Disable_Read_Write_Protection+0x4c>

		return OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e000      	b.n	8001f82 <FLASH_Disable_Read_Write_Protection+0x5e>
	/* Wait For Flash to end its ongoing operation */
	while((FLASH -> SR & FLASH_SR_BSY_FLAG) != 0);

	return OK;
#endif
return NOK;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	40023c00 	.word	0x40023c00

08001f90 <FLASH_Enable_Read_Write_Protection>:
 * @brief  Flash Enable Read Protection Function
 * @param  None
 * @retval Return Status (If ok -> OK)
 */
Return_Status FLASH_Enable_Read_Write_Protection(u32 Sector_Number, u8 Protection_Type)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
	u32 Write_Protected_Sectors_Bank1 = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
	u32 Write_Protected_Sectors_Bank2 = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
	/* Wait For Flash to end its ongoing operation */
	while((FLASH -> SR & FLASH_SR_BSY_FLAG) != 0);
 8001fa4:	bf00      	nop
 8001fa6:	4ba0      	ldr	r3, [pc, #640]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f9      	bne.n	8001fa6 <FLASH_Enable_Read_Write_Protection+0x16>

	if(Protection_Type == 2)
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	f040 8130 	bne.w	800221a <FLASH_Enable_Read_Write_Protection+0x28a>
	{
		/* Read and Write Protection */

		/* Set SPRMOD Bit (Selection of Protection Mode for nWPRi) */
		FLASH -> OPTCR |= (FLASH_OPTCR_SPRMOD);
 8001fba:	4a9b      	ldr	r2, [pc, #620]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8001fbc:	4b9a      	ldr	r3, [pc, #616]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fc4:	6153      	str	r3, [r2, #20]

		/* To Get Write Protected Sectors on Bank 1 */
		Write_Protected_Sectors_Bank1 = ( (~(FLASH -> OPTCR & (0xFFF << 16))) & (0xFFF << 16) );
 8001fc6:	4b98      	ldr	r3, [pc, #608]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	4b97      	ldr	r3, [pc, #604]	; (800222c <FLASH_Enable_Read_Write_Protection+0x29c>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
		FLASH -> OPTCR  &= ~(0xFFF << 16);
 8001fd2:	4a95      	ldr	r2, [pc, #596]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8001fd4:	4b94      	ldr	r3, [pc, #592]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8001fdc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001fe0:	6153      	str	r3, [r2, #20]
		FLASH -> OPTCR  |= (Write_Protected_Sectors_Bank1);
 8001fe2:	4991      	ldr	r1, [pc, #580]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8001fe4:	4b90      	ldr	r3, [pc, #576]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	614b      	str	r3, [r1, #20]


		Write_Protected_Sectors_Bank2 = ( (~(FLASH -> OPTCR1 & (0xFFF << 16))) & (0xFFF << 16) );
 8001fee:	4b8e      	ldr	r3, [pc, #568]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	4b8d      	ldr	r3, [pc, #564]	; (800222c <FLASH_Enable_Read_Write_Protection+0x29c>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60bb      	str	r3, [r7, #8]
		FLASH -> OPTCR1 &= ~(0xFFF << 16);
 8001ffa:	4a8b      	ldr	r2, [pc, #556]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8001ffc:	4b8a      	ldr	r3, [pc, #552]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8002004:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002008:	6193      	str	r3, [r2, #24]
		FLASH -> OPTCR1 |= (Write_Protected_Sectors_Bank2 );
 800200a:	4987      	ldr	r1, [pc, #540]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 800200c:	4b86      	ldr	r3, [pc, #536]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 800200e:	699a      	ldr	r2, [r3, #24]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4313      	orrs	r3, r2
 8002014:	618b      	str	r3, [r1, #24]


		if(Sector_Number <= (11))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0b      	cmp	r3, #11
 800201a:	d873      	bhi.n	8002104 <FLASH_Enable_Read_Write_Protection+0x174>
		{
			//FLASH -> OPTCR &= ~(0xFFF << 16);

			switch(Sector_Number)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b0b      	cmp	r3, #11
 8002020:	d86e      	bhi.n	8002100 <FLASH_Enable_Read_Write_Protection+0x170>
 8002022:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <FLASH_Enable_Read_Write_Protection+0x98>)
 8002024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002028:	08002059 	.word	0x08002059
 800202c:	08002067 	.word	0x08002067
 8002030:	08002075 	.word	0x08002075
 8002034:	08002083 	.word	0x08002083
 8002038:	08002091 	.word	0x08002091
 800203c:	0800209f 	.word	0x0800209f
 8002040:	080020ad 	.word	0x080020ad
 8002044:	080020bb 	.word	0x080020bb
 8002048:	080020c9 	.word	0x080020c9
 800204c:	080020d7 	.word	0x080020d7
 8002050:	080020e5 	.word	0x080020e5
 8002054:	080020f3 	.word	0x080020f3
			{
			case 0:
				FLASH -> OPTCR |= (SECTOR0_RW);
 8002058:	4a73      	ldr	r2, [pc, #460]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 800205a:	4b73      	ldr	r3, [pc, #460]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	6153      	str	r3, [r2, #20]
				break;
 8002064:	e0cc      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

			case 1:
				FLASH -> OPTCR |= (SECTOR1_RW);
 8002066:	4a70      	ldr	r2, [pc, #448]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002068:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002070:	6153      	str	r3, [r2, #20]
				break;
 8002072:	e0c5      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

			case 2:
				FLASH -> OPTCR |= (SECTOR2_RW);
 8002074:	4a6c      	ldr	r2, [pc, #432]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002076:	4b6c      	ldr	r3, [pc, #432]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207e:	6153      	str	r3, [r2, #20]
				break;
 8002080:	e0be      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

			case 3:
				FLASH -> OPTCR |= (SECTOR3_RW);
 8002082:	4a69      	ldr	r2, [pc, #420]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002084:	4b68      	ldr	r3, [pc, #416]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800208c:	6153      	str	r3, [r2, #20]
				break;
 800208e:	e0b7      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

			case 4:

				FLASH -> OPTCR |= (SECTOR4_RW);
 8002090:	4a65      	ldr	r2, [pc, #404]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002092:	4b65      	ldr	r3, [pc, #404]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800209a:	6153      	str	r3, [r2, #20]

				break;
 800209c:	e0b0      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

			case 5:
				FLASH -> OPTCR |= (SECTOR5_RW);
 800209e:	4a62      	ldr	r2, [pc, #392]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020a0:	4b61      	ldr	r3, [pc, #388]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020a8:	6153      	str	r3, [r2, #20]
				break;
 80020aa:	e0a9      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

			case 6:
				FLASH -> OPTCR |= (SECTOR6_RW);
 80020ac:	4a5e      	ldr	r2, [pc, #376]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020ae:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020b6:	6153      	str	r3, [r2, #20]
				break;
 80020b8:	e0a2      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

			case 7:
				FLASH -> OPTCR |= (SECTOR7_RW);
 80020ba:	4a5b      	ldr	r2, [pc, #364]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020bc:	4b5a      	ldr	r3, [pc, #360]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020c4:	6153      	str	r3, [r2, #20]
				break;
 80020c6:	e09b      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

			case 8:
				FLASH -> OPTCR |= (SECTOR8_RW);
 80020c8:	4a57      	ldr	r2, [pc, #348]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020ca:	4b57      	ldr	r3, [pc, #348]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020d2:	6153      	str	r3, [r2, #20]
				break;
 80020d4:	e094      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

			case 9:
				FLASH -> OPTCR |= (SECTOR9_RW);
 80020d6:	4a54      	ldr	r2, [pc, #336]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020d8:	4b53      	ldr	r3, [pc, #332]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020e0:	6153      	str	r3, [r2, #20]
				break;
 80020e2:	e08d      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

			case 10:
				FLASH -> OPTCR |= (SECTOR10_RW);
 80020e4:	4a50      	ldr	r2, [pc, #320]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020e6:	4b50      	ldr	r3, [pc, #320]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020ee:	6153      	str	r3, [r2, #20]
				break;
 80020f0:	e086      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

			case 11:
				FLASH -> OPTCR |= (SECTOR11_RW);
 80020f2:	4a4d      	ldr	r2, [pc, #308]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020f4:	4b4c      	ldr	r3, [pc, #304]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020fc:	6153      	str	r3, [r2, #20]
				break;
 80020fe:	e07f      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

			default:
				return NOK;
 8002100:	2301      	movs	r3, #1
 8002102:	e08b      	b.n	800221c <FLASH_Enable_Read_Write_Protection+0x28c>
				break;
			}

		}
		else if((Sector_Number >= (12)) && (Sector_Number <= (23)) )
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b0b      	cmp	r3, #11
 8002108:	d97a      	bls.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b17      	cmp	r3, #23
 800210e:	d877      	bhi.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>
		{
			Sector_Number-=12;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b0c      	subs	r3, #12
 8002114:	607b      	str	r3, [r7, #4]
			//FLASH -> OPTCR1 &= ~(0xFFF << 16);

			//FLASH -> OPTCR1 &= ~(Sector_Number<<16);
			switch(Sector_Number)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b0b      	cmp	r3, #11
 800211a:	d86f      	bhi.n	80021fc <FLASH_Enable_Read_Write_Protection+0x26c>
 800211c:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <FLASH_Enable_Read_Write_Protection+0x194>)
 800211e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002122:	bf00      	nop
 8002124:	08002155 	.word	0x08002155
 8002128:	08002163 	.word	0x08002163
 800212c:	08002171 	.word	0x08002171
 8002130:	0800217f 	.word	0x0800217f
 8002134:	0800218d 	.word	0x0800218d
 8002138:	0800219b 	.word	0x0800219b
 800213c:	080021a9 	.word	0x080021a9
 8002140:	080021b7 	.word	0x080021b7
 8002144:	080021c5 	.word	0x080021c5
 8002148:	080021d3 	.word	0x080021d3
 800214c:	080021e1 	.word	0x080021e1
 8002150:	080021ef 	.word	0x080021ef
			{
				case 0:
					FLASH -> OPTCR1 |= (SECTOR0_RW);
 8002154:	4a34      	ldr	r2, [pc, #208]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215e:	6193      	str	r3, [r2, #24]
				break;
 8002160:	e04e      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

				case 1:
					FLASH -> OPTCR1 |= (SECTOR1_RW);
 8002162:	4a31      	ldr	r2, [pc, #196]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	6193      	str	r3, [r2, #24]
				break;
 800216e:	e047      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

				case 2:
					FLASH -> OPTCR1 |= (SECTOR2_RW);
 8002170:	4a2d      	ldr	r2, [pc, #180]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002172:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217a:	6193      	str	r3, [r2, #24]
				break;
 800217c:	e040      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

				case 3:
					FLASH -> OPTCR1 |= (SECTOR3_RW);
 800217e:	4a2a      	ldr	r2, [pc, #168]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002188:	6193      	str	r3, [r2, #24]
				break;
 800218a:	e039      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

				case 4:
					FLASH -> OPTCR1 |= (SECTOR4_RW);
 800218c:	4a26      	ldr	r2, [pc, #152]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 800218e:	4b26      	ldr	r3, [pc, #152]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002196:	6193      	str	r3, [r2, #24]
				break;
 8002198:	e032      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

				case 5:
					FLASH -> OPTCR1 |= (SECTOR5_RW);
 800219a:	4a23      	ldr	r2, [pc, #140]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 800219c:	4b22      	ldr	r3, [pc, #136]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021a4:	6193      	str	r3, [r2, #24]
				break;
 80021a6:	e02b      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

				case 6:
					FLASH -> OPTCR1 |= (SECTOR6_RW);
 80021a8:	4a1f      	ldr	r2, [pc, #124]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80021aa:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b2:	6193      	str	r3, [r2, #24]
				break;
 80021b4:	e024      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

				case 7:
					FLASH -> OPTCR1 |= (SECTOR7_RW);
 80021b6:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021c0:	6193      	str	r3, [r2, #24]
				break;
 80021c2:	e01d      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

				case 8:
					FLASH -> OPTCR1 |= (SECTOR8_RW);
 80021c4:	4a18      	ldr	r2, [pc, #96]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ce:	6193      	str	r3, [r2, #24]
				break;
 80021d0:	e016      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

				case 9:
					FLASH -> OPTCR1 |= (SECTOR9_RW);
 80021d2:	4a15      	ldr	r2, [pc, #84]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021dc:	6193      	str	r3, [r2, #24]
				break;
 80021de:	e00f      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

				case 10:
					FLASH -> OPTCR1 |= (SECTOR10_RW);
 80021e0:	4a11      	ldr	r2, [pc, #68]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021ea:	6193      	str	r3, [r2, #24]
				break;
 80021ec:	e008      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

				case 11:
					FLASH -> OPTCR1 |= (SECTOR11_RW);
 80021ee:	4a0e      	ldr	r2, [pc, #56]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021f8:	6193      	str	r3, [r2, #24]
				break;
 80021fa:	e001      	b.n	8002200 <FLASH_Enable_Read_Write_Protection+0x270>

				default:
					return NOK;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e00d      	b.n	800221c <FLASH_Enable_Read_Write_Protection+0x28c>
				break;
			}
		}

		FLASH -> OPTCR |= FLASH_OPTCR_OPTSRTR;
 8002200:	4a09      	ldr	r2, [pc, #36]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f043 0302 	orr.w	r3, r3, #2
 800220a:	6153      	str	r3, [r2, #20]

		/* Wait For Flash to end its ongoing operation */
		while((FLASH -> SR & FLASH_SR_BSY_FLAG) != 0);
 800220c:	bf00      	nop
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <FLASH_Enable_Read_Write_Protection+0x298>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f9      	bne.n	800220e <FLASH_Enable_Read_Write_Protection+0x27e>
	}
	return OK;
 800221a:	2300      	movs	r3, #0

}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40023c00 	.word	0x40023c00
 800222c:	0fff0000 	.word	0x0fff0000

08002230 <u32FLASH_Read_Protection_Level>:

u32 u32FLASH_Read_Protection_Level(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
	u32 Temp1 = (~(*(volatile u16*)OPTCR_nWRP_Value) & 0xFFF);
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <u32FLASH_Read_Protection_Level+0x3c>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002242:	60fb      	str	r3, [r7, #12]

	u32 Temp2 = (((~(*(volatile u16*)OPTCR1_nWRP_Value)) & 0xFFF)<<12);
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <u32FLASH_Read_Protection_Level+0x40>)
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	031b      	lsls	r3, r3, #12
 800224e:	461a      	mov	r2, r3
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <u32FLASH_Read_Protection_Level+0x44>)
 8002252:	4013      	ands	r3, r2
 8002254:	60bb      	str	r3, [r7, #8]

	u32 Temp3 = Temp1 | Temp2;
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4313      	orrs	r3, r2
 800225c:	607b      	str	r3, [r7, #4]
	//return (u16)(*(volatile u16*)OPTCR_nWRP_Value);
	return Temp3;
 800225e:	687b      	ldr	r3, [r7, #4]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40023c16 	.word	0x40023c16
 8002270:	40023c1a 	.word	0x40023c1a
 8002274:	00fff000 	.word	0x00fff000

08002278 <FLASH_Enable_Write_Protection>:
 * @brief  Flash Enable Write Protection Function
 * @param  None
 * @retval Return Status (If ok -> OK)
 */
Return_Status FLASH_Enable_Write_Protection(u32 Sector_Number, u8 Protection_Type)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
	/* Wait For Flash to end its ongoing operation */
	while((FLASH -> SR & FLASH_SR_BSY_FLAG) != 0);
 8002284:	bf00      	nop
 8002286:	4b8c      	ldr	r3, [pc, #560]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f9      	bne.n	8002286 <FLASH_Enable_Write_Protection+0xe>

	if(Protection_Type == 1)
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	2b01      	cmp	r3, #1
 8002296:	f040 8108 	bne.w	80024aa <FLASH_Enable_Write_Protection+0x232>
	{
		/* Write Protection Only */

		/* Clear SPRMOD Bit (Selection of Protection Mode for nWPRi) */
		FLASH -> OPTCR &= ~(FLASH_OPTCR_SPRMOD);
 800229a:	4a87      	ldr	r2, [pc, #540]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800229c:	4b86      	ldr	r3, [pc, #536]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022a4:	6153      	str	r3, [r2, #20]

		if(Sector_Number <= (11))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0b      	cmp	r3, #11
 80022aa:	d873      	bhi.n	8002394 <FLASH_Enable_Write_Protection+0x11c>
		{
			switch(Sector_Number)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b0b      	cmp	r3, #11
 80022b0:	d86e      	bhi.n	8002390 <FLASH_Enable_Write_Protection+0x118>
 80022b2:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <FLASH_Enable_Write_Protection+0x40>)
 80022b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b8:	080022e9 	.word	0x080022e9
 80022bc:	080022f7 	.word	0x080022f7
 80022c0:	08002305 	.word	0x08002305
 80022c4:	08002313 	.word	0x08002313
 80022c8:	08002321 	.word	0x08002321
 80022cc:	0800232f 	.word	0x0800232f
 80022d0:	0800233d 	.word	0x0800233d
 80022d4:	0800234b 	.word	0x0800234b
 80022d8:	08002359 	.word	0x08002359
 80022dc:	08002367 	.word	0x08002367
 80022e0:	08002375 	.word	0x08002375
 80022e4:	08002383 	.word	0x08002383
			{
			case 0:
				FLASH -> OPTCR &= ~(SECTOR0_RW);
 80022e8:	4a73      	ldr	r2, [pc, #460]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 80022ea:	4b73      	ldr	r3, [pc, #460]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f2:	6153      	str	r3, [r2, #20]
				break;
 80022f4:	e0cc      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 1:
				FLASH -> OPTCR &= ~(SECTOR1_RW);
 80022f6:	4a70      	ldr	r2, [pc, #448]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 80022f8:	4b6f      	ldr	r3, [pc, #444]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002300:	6153      	str	r3, [r2, #20]
				break;
 8002302:	e0c5      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 2:
				FLASH -> OPTCR &= ~(SECTOR2_RW);
 8002304:	4a6c      	ldr	r2, [pc, #432]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002306:	4b6c      	ldr	r3, [pc, #432]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230e:	6153      	str	r3, [r2, #20]
				break;
 8002310:	e0be      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 3:
				FLASH -> OPTCR &= ~(SECTOR3_RW);
 8002312:	4a69      	ldr	r2, [pc, #420]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002314:	4b68      	ldr	r3, [pc, #416]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800231c:	6153      	str	r3, [r2, #20]
				break;
 800231e:	e0b7      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 4:
				FLASH -> OPTCR &= ~(SECTOR4_RW);
 8002320:	4a65      	ldr	r2, [pc, #404]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002322:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800232a:	6153      	str	r3, [r2, #20]
				break;
 800232c:	e0b0      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 5:
				FLASH -> OPTCR &= ~(SECTOR5_RW);
 800232e:	4a62      	ldr	r2, [pc, #392]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002330:	4b61      	ldr	r3, [pc, #388]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002338:	6153      	str	r3, [r2, #20]
				break;
 800233a:	e0a9      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 6:
				FLASH -> OPTCR &= ~(SECTOR6_RW);
 800233c:	4a5e      	ldr	r2, [pc, #376]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800233e:	4b5e      	ldr	r3, [pc, #376]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002346:	6153      	str	r3, [r2, #20]
				break;
 8002348:	e0a2      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 7:
				FLASH -> OPTCR &= ~(SECTOR7_RW);
 800234a:	4a5b      	ldr	r2, [pc, #364]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800234c:	4b5a      	ldr	r3, [pc, #360]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002354:	6153      	str	r3, [r2, #20]
				break;
 8002356:	e09b      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 8:
				FLASH -> OPTCR &= ~(SECTOR8_RW);
 8002358:	4a57      	ldr	r2, [pc, #348]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800235a:	4b57      	ldr	r3, [pc, #348]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002362:	6153      	str	r3, [r2, #20]
				break;
 8002364:	e094      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 9:
				FLASH -> OPTCR &= ~(SECTOR9_RW);
 8002366:	4a54      	ldr	r2, [pc, #336]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002368:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002370:	6153      	str	r3, [r2, #20]
				break;
 8002372:	e08d      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 10:
				FLASH -> OPTCR &= ~(SECTOR10_RW);
 8002374:	4a50      	ldr	r2, [pc, #320]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002376:	4b50      	ldr	r3, [pc, #320]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800237e:	6153      	str	r3, [r2, #20]
				break;
 8002380:	e086      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 11:
				FLASH -> OPTCR &= ~(SECTOR11_RW);
 8002382:	4a4d      	ldr	r2, [pc, #308]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002384:	4b4c      	ldr	r3, [pc, #304]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800238c:	6153      	str	r3, [r2, #20]
				break;
 800238e:	e07f      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			default:
				return NOK;
 8002390:	2301      	movs	r3, #1
 8002392:	e08b      	b.n	80024ac <FLASH_Enable_Write_Protection+0x234>
				break;

			}
			//FLASH -> OPTCR &= ~(Sector_Number<<16);
		}
		else if((Sector_Number >= (12)) && (Sector_Number <= (23)) )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b0b      	cmp	r3, #11
 8002398:	d97a      	bls.n	8002490 <FLASH_Enable_Write_Protection+0x218>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b17      	cmp	r3, #23
 800239e:	d877      	bhi.n	8002490 <FLASH_Enable_Write_Protection+0x218>
		{
			Sector_Number-=12;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b0c      	subs	r3, #12
 80023a4:	607b      	str	r3, [r7, #4]
			//FLASH -> OPTCR1 &= ~(Sector_Number<<16);
			switch(Sector_Number)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b0b      	cmp	r3, #11
 80023aa:	d86f      	bhi.n	800248c <FLASH_Enable_Write_Protection+0x214>
 80023ac:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <FLASH_Enable_Write_Protection+0x13c>)
 80023ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b2:	bf00      	nop
 80023b4:	080023e5 	.word	0x080023e5
 80023b8:	080023f3 	.word	0x080023f3
 80023bc:	08002401 	.word	0x08002401
 80023c0:	0800240f 	.word	0x0800240f
 80023c4:	0800241d 	.word	0x0800241d
 80023c8:	0800242b 	.word	0x0800242b
 80023cc:	08002439 	.word	0x08002439
 80023d0:	08002447 	.word	0x08002447
 80023d4:	08002455 	.word	0x08002455
 80023d8:	08002463 	.word	0x08002463
 80023dc:	08002471 	.word	0x08002471
 80023e0:	0800247f 	.word	0x0800247f
			{
			case 0:
				FLASH -> OPTCR1 &= ~(SECTOR0_RW);
 80023e4:	4a34      	ldr	r2, [pc, #208]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	6193      	str	r3, [r2, #24]
				break;
 80023f0:	e04e      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 1:
				FLASH -> OPTCR1 &= ~(SECTOR1_RW);
 80023f2:	4a31      	ldr	r2, [pc, #196]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 80023f4:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023fc:	6193      	str	r3, [r2, #24]
				break;
 80023fe:	e047      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 2:
				FLASH -> OPTCR1 &= ~(SECTOR2_RW);
 8002400:	4a2d      	ldr	r2, [pc, #180]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002402:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240a:	6193      	str	r3, [r2, #24]
				break;
 800240c:	e040      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 3:
				FLASH -> OPTCR1 &= ~(SECTOR3_RW);
 800240e:	4a2a      	ldr	r2, [pc, #168]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002410:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002418:	6193      	str	r3, [r2, #24]
				break;
 800241a:	e039      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 4:
				FLASH -> OPTCR1 &= ~(SECTOR4_RW);
 800241c:	4a26      	ldr	r2, [pc, #152]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002426:	6193      	str	r3, [r2, #24]
				break;
 8002428:	e032      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 5:
				FLASH -> OPTCR1 &= ~(SECTOR5_RW);
 800242a:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800242c:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002434:	6193      	str	r3, [r2, #24]
				break;
 8002436:	e02b      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 6:
				FLASH -> OPTCR1 &= ~(SECTOR6_RW);
 8002438:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800243a:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002442:	6193      	str	r3, [r2, #24]
				break;
 8002444:	e024      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 7:
				FLASH -> OPTCR1 &= ~(SECTOR7_RW);
 8002446:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002450:	6193      	str	r3, [r2, #24]
				break;
 8002452:	e01d      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 8:
				FLASH -> OPTCR1 &= ~(SECTOR8_RW);
 8002454:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800245e:	6193      	str	r3, [r2, #24]
				break;
 8002460:	e016      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 9:
				FLASH -> OPTCR1 &= ~(SECTOR9_RW);
 8002462:	4a15      	ldr	r2, [pc, #84]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800246c:	6193      	str	r3, [r2, #24]
				break;
 800246e:	e00f      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 10:
				FLASH -> OPTCR1 &= ~(SECTOR10_RW);
 8002470:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800247a:	6193      	str	r3, [r2, #24]
				break;
 800247c:	e008      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			case 11:
				FLASH -> OPTCR1 &= ~(SECTOR11_RW);
 800247e:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002488:	6193      	str	r3, [r2, #24]
				break;
 800248a:	e001      	b.n	8002490 <FLASH_Enable_Write_Protection+0x218>

			default:
				return NOK;
 800248c:	2301      	movs	r3, #1
 800248e:	e00d      	b.n	80024ac <FLASH_Enable_Write_Protection+0x234>
				break;
			}
		}

		FLASH -> OPTCR |= FLASH_OPTCR_OPTSRTR;
 8002490:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f043 0302 	orr.w	r3, r3, #2
 800249a:	6153      	str	r3, [r2, #20]

		/* Wait For Flash to end its ongoing operation */
		while((FLASH -> SR & FLASH_SR_BSY_FLAG) != 0);
 800249c:	bf00      	nop
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <FLASH_Enable_Write_Protection+0x240>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f9      	bne.n	800249e <FLASH_Enable_Write_Protection+0x226>

	}
	return OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40023c00 	.word	0x40023c00

080024bc <FLASH_Mass_Erase>:
 * @brief 	Mass Erase (Bank 1 - Bank 2 - or Both) Function
 * @param 	Pointer to Flash Configuration Struct
 * @retval  Return Status (If ok -> OK)
 */
Return_Status FLASH_Mass_Erase(Flash_Configurations *xFlashConfig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	if(FLASH_Wait_Till_Operation_End() == OK)
 80024c4:	f7ff fcb4 	bl	8001e30 <FLASH_Wait_Till_Operation_End>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d13e      	bne.n	800254c <FLASH_Mass_Erase+0x90>
	{
		FLASH->CR &= ~(FLASH_CR_PSIZE_64);
 80024ce:	4a22      	ldr	r2, [pc, #136]	; (8002558 <FLASH_Mass_Erase+0x9c>)
 80024d0:	4b21      	ldr	r3, [pc, #132]	; (8002558 <FLASH_Mass_Erase+0x9c>)
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d8:	6113      	str	r3, [r2, #16]

		if(xFlashConfig ->Banks == FLASH_BANK_1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d106      	bne.n	80024f0 <FLASH_Mass_Erase+0x34>
		{
			/* Only Bank 1 Will be Erased */
			FLASH -> CR |= FLASH_CR_MER_BANK_1;
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <FLASH_Mass_Erase+0x9c>)
 80024e4:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <FLASH_Mass_Erase+0x9c>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6113      	str	r3, [r2, #16]
 80024ee:	e012      	b.n	8002516 <FLASH_Mass_Erase+0x5a>
		}
		else if (xFlashConfig ->Banks == FLASH_BANK_2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d106      	bne.n	8002506 <FLASH_Mass_Erase+0x4a>
		{
			/* Only Bank 1 Will be Erased */
			FLASH -> CR |= FLASH_CR_MER_BANK_2;
 80024f8:	4a17      	ldr	r2, [pc, #92]	; (8002558 <FLASH_Mass_Erase+0x9c>)
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <FLASH_Mass_Erase+0x9c>)
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002502:	6113      	str	r3, [r2, #16]
 8002504:	e007      	b.n	8002516 <FLASH_Mass_Erase+0x5a>
		}
		else
		{
			/* Both Banks will be erased */
			FLASH -> CR |= FLASH_CR_MER_BOTH;
 8002506:	4a14      	ldr	r2, [pc, #80]	; (8002558 <FLASH_Mass_Erase+0x9c>)
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <FLASH_Mass_Erase+0x9c>)
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	6113      	str	r3, [r2, #16]
		}
		FLASH -> CR |= (FLASH_CR_START | ((u32) xFlashConfig ->Voltage_Range << 8U) );
 8002516:	4910      	ldr	r1, [pc, #64]	; (8002558 <FLASH_Mass_Erase+0x9c>)
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <FLASH_Mass_Erase+0x9c>)
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	4313      	orrs	r3, r2
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	610b      	str	r3, [r1, #16]

		if(FLASH_Wait_Till_Operation_End() == OK)
 800252a:	f7ff fc81 	bl	8001e30 <FLASH_Wait_Till_Operation_End>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <FLASH_Mass_Erase+0x88>
		{
			/* When finish writing to flash, Disable the MER Bit */
			FLASH -> CR &= ~(FLASH_CR_MER_BOTH);
 8002534:	4a08      	ldr	r2, [pc, #32]	; (8002558 <FLASH_Mass_Erase+0x9c>)
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <FLASH_Mass_Erase+0x9c>)
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800253e:	f023 0304 	bic.w	r3, r3, #4
 8002542:	6113      	str	r3, [r2, #16]
		}
		vidFLASH_FlushCaches();
 8002544:	f000 f86a 	bl	800261c <vidFLASH_FlushCaches>
	return OK;
 8002548:	2300      	movs	r3, #0
 800254a:	e000      	b.n	800254e <FLASH_Mass_Erase+0x92>
	}

	return NOK;
 800254c:	2301      	movs	r3, #1
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023c00 	.word	0x40023c00

0800255c <FLASH_Sector_Erase>:
 * @param 	u8Voltage_Range : To Decide the program Parallelism
 * 			u32Bank			: To Know which bank will be erased or both
 * @retval 	Return Status (OK if everything fine)
 */
Return_Status FLASH_Sector_Erase(u8 u8Voltage_Range, u32 u32Sector)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]
	u32 Temp = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]

	switch(u8Voltage_Range)
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d819      	bhi.n	80025a6 <FLASH_Sector_Erase+0x4a>
 8002572:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <FLASH_Sector_Erase+0x1c>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	08002589 	.word	0x08002589
 800257c:	0800258f 	.word	0x0800258f
 8002580:	08002597 	.word	0x08002597
 8002584:	0800259f 	.word	0x0800259f
	{
	case FLASH_VOLATGE_RANGE_1:
		Temp =	FLASH_CR_PSIZE_8;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
		break;
 800258c:	e00f      	b.n	80025ae <FLASH_Sector_Erase+0x52>

	case FLASH_VOLATGE_RANGE_2:
		Temp = FLASH_CR_PSIZE_16;
 800258e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002592:	60fb      	str	r3, [r7, #12]
		break;
 8002594:	e00b      	b.n	80025ae <FLASH_Sector_Erase+0x52>

	case FLASH_VOLATGE_RANGE_3:
		Temp = FLASH_CR_PSIZE_32;
 8002596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800259a:	60fb      	str	r3, [r7, #12]
		break;
 800259c:	e007      	b.n	80025ae <FLASH_Sector_Erase+0x52>

	case FLASH_VOLATGE_RANGE_4:
		Temp = FLASH_CR_PSIZE_64;
 800259e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025a2:	60fb      	str	r3, [r7, #12]
		break;
 80025a4:	e003      	b.n	80025ae <FLASH_Sector_Erase+0x52>

	default:
		Temp = -1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	60fb      	str	r3, [r7, #12]
		break;
 80025ac:	bf00      	nop

	}

	if(Temp != -1)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d028      	beq.n	8002608 <FLASH_Sector_Erase+0xac>
	{
		/* If Sector > Sector 11
		 * Increament Sector num by 4
		 * due to invalid values at this region
		 */
		if (u32Sector > FLASH_SECTOR_11)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b0b      	cmp	r3, #11
 80025ba:	d902      	bls.n	80025c2 <FLASH_Sector_Erase+0x66>
		{
			u32Sector +=4;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	3304      	adds	r3, #4
 80025c0:	603b      	str	r3, [r7, #0]
		}


		/* Clear the bits */
		FLASH->CR &= ~(FLASH_CR_PSIZE_64);
 80025c2:	4a15      	ldr	r2, [pc, #84]	; (8002618 <FLASH_Sector_Erase+0xbc>)
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <FLASH_Sector_Erase+0xbc>)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025cc:	6113      	str	r3, [r2, #16]

		FLASH->CR |= Temp;
 80025ce:	4912      	ldr	r1, [pc, #72]	; (8002618 <FLASH_Sector_Erase+0xbc>)
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <FLASH_Sector_Erase+0xbc>)
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	610b      	str	r3, [r1, #16]

		/* Clear Sector Selector Bits */
		FLASH->CR &= ~(FLASH_CR_SNB_CLR);
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <FLASH_Sector_Erase+0xbc>)
 80025dc:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <FLASH_Sector_Erase+0xbc>)
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025e4:	6113      	str	r3, [r2, #16]

		FLASH->CR |=(FLASH_CR_SER | (u32Sector<<3) );
 80025e6:	490c      	ldr	r1, [pc, #48]	; (8002618 <FLASH_Sector_Erase+0xbc>)
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <FLASH_Sector_Erase+0xbc>)
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	610b      	str	r3, [r1, #16]

		FLASH->CR |= FLASH_CR_START;
 80025f8:	4a07      	ldr	r2, [pc, #28]	; (8002618 <FLASH_Sector_Erase+0xbc>)
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <FLASH_Sector_Erase+0xbc>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	6113      	str	r3, [r2, #16]

		return OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <FLASH_Sector_Erase+0xae>
	}
	else
	{
		return NOK;
 8002608:	2301      	movs	r3, #1
	}
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40023c00 	.word	0x40023c00

0800261c <vidFLASH_FlushCaches>:
 * @brief 	Flush Instruction
 * @param 	None
 * @retval None
 */
void vidFLASH_FlushCaches(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
	/* Flush Instruction Cache */
	if((FLASH->ACR & FLASH_ACR_ICEN) != 0)
 8002620:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002628:	2b00      	cmp	r3, #0
 800262a:	d017      	beq.n	800265c <vidFLASH_FlushCaches+0x40>
	{
		/* Disable Flush Instruction */
		FLASH->ACR &= ~(FLASH_ACR_ICEN);
 800262c:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 800262e:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002636:	6013      	str	r3, [r2, #0]

		/* Reset Flush Instruction */
		FLASH->ACR |=  FLASH_ACR_ICRST;
 8002638:	4a1a      	ldr	r2, [pc, #104]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002642:	6013      	str	r3, [r2, #0]
		FLASH->ACR &= ~(FLASH_ACR_ICRST);
 8002644:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800264e:	6013      	str	r3, [r2, #0]

		/* Enable Flush Instruction */
		FLASH->ACR |= FLASH_ACR_ICEN;
 8002650:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265a:	6013      	str	r3, [r2, #0]

	}

	/* Flush Data Cache */
	if((FLASH->ACR & FLASH_ACR_DCEN) != 0)
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d017      	beq.n	8002698 <vidFLASH_FlushCaches+0x7c>
	{
		/* Disable Flush Instruction */
		FLASH->ACR &= ~(FLASH_ACR_DCEN);
 8002668:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002672:	6013      	str	r3, [r2, #0]
		/* Reset Flush Instruction */
		FLASH->ACR |=  FLASH_ACR_DCRST;
 8002674:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800267e:	6013      	str	r3, [r2, #0]
		FLASH->ACR &= ~(FLASH_ACR_DCRST);
 8002680:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800268a:	6013      	str	r3, [r2, #0]

		/* Enable Flush Instruction */
		FLASH->ACR |= FLASH_ACR_DCEN;
 800268c:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <vidFLASH_FlushCaches+0x88>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002696:	6013      	str	r3, [r2, #0]
	}
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023c00 	.word	0x40023c00

080026a8 <vidFLASH_ProgramByte>:
 *
 * 			u8Data:		Byte chunk of data that will be saved
 * @retval	 None
 */
void vidFLASH_ProgramByte(u32 u32Address, u8 u8Data)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
	/* If Previos Operation ends, go to program the new data */
	FLASH->CR &= ~(FLASH_CR_PSIZE_64);
 80026b4:	4a0c      	ldr	r2, [pc, #48]	; (80026e8 <vidFLASH_ProgramByte+0x40>)
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <vidFLASH_ProgramByte+0x40>)
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026be:	6113      	str	r3, [r2, #16]

	FLASH->CR |= FLASH_CR_PSIZE_8;
 80026c0:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <vidFLASH_ProgramByte+0x40>)
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <vidFLASH_ProgramByte+0x40>)
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 80026c8:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <vidFLASH_ProgramByte+0x40>)
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <vidFLASH_ProgramByte+0x40>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6113      	str	r3, [r2, #16]
	*(volatile u8*)u32Address = u8Data;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	701a      	strb	r2, [r3, #0]

}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00

080026ec <vidFLASH_ProgramHalfWord>:
 *
 * 			u16Data:	Half Word chunk of data that will be saved
 * @retval	 None
 */
void vidFLASH_ProgramHalfWord(u32 u32Address, u16 u16Data)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
	/* If Previos Operation ends, go to program the new data */
	FLASH->CR &= ~(FLASH_CR_PSIZE_64);
 80026f8:	4a0c      	ldr	r2, [pc, #48]	; (800272c <vidFLASH_ProgramHalfWord+0x40>)
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <vidFLASH_ProgramHalfWord+0x40>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002702:	6113      	str	r3, [r2, #16]

	FLASH->CR |= FLASH_CR_PSIZE_8;
 8002704:	4a09      	ldr	r2, [pc, #36]	; (800272c <vidFLASH_ProgramHalfWord+0x40>)
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <vidFLASH_ProgramHalfWord+0x40>)
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800270c:	4a07      	ldr	r2, [pc, #28]	; (800272c <vidFLASH_ProgramHalfWord+0x40>)
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <vidFLASH_ProgramHalfWord+0x40>)
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6113      	str	r3, [r2, #16]

	*(volatile u16*)u32Address = u16Data;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	887a      	ldrh	r2, [r7, #2]
 800271c:	801a      	strh	r2, [r3, #0]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40023c00 	.word	0x40023c00

08002730 <vidFLASH_ProgramWord>:
 *
 * 			u32Data:	Word chunk of data that will be saved
 * @retval	 None
 */
void vidFLASH_ProgramWord(u32 u32Address, u32 u32Data)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	/* If Previos Operation ends, go to program the new data */
	FLASH->CR &= ~(FLASH_CR_PSIZE_64);
 800273a:	4a0c      	ldr	r2, [pc, #48]	; (800276c <vidFLASH_ProgramWord+0x3c>)
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <vidFLASH_ProgramWord+0x3c>)
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002744:	6113      	str	r3, [r2, #16]

	FLASH->CR |= FLASH_CR_PSIZE_8;
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <vidFLASH_ProgramWord+0x3c>)
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <vidFLASH_ProgramWord+0x3c>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800274e:	4a07      	ldr	r2, [pc, #28]	; (800276c <vidFLASH_ProgramWord+0x3c>)
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <vidFLASH_ProgramWord+0x3c>)
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6113      	str	r3, [r2, #16]

	*(volatile u32*)u32Address = u32Data;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	601a      	str	r2, [r3, #0]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	40023c00 	.word	0x40023c00

08002770 <vidFLASH_ProgramDoubleWord>:
 *
 * 			u64Data:	Double Word chunk of data that will be saved
 * @retval	 None
 */
void vidFLASH_ProgramDoubleWord(u32 u32Address, u64 u64Data)
{
 8002770:	b4f0      	push	{r4, r5, r6, r7}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	e9c7 2300 	strd	r2, r3, [r7]
	/* If Previos Operation ends, go to program the new data */
	FLASH->CR &= ~(FLASH_CR_PSIZE_64);
 800277c:	4a11      	ldr	r2, [pc, #68]	; (80027c4 <vidFLASH_ProgramDoubleWord+0x54>)
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <vidFLASH_ProgramDoubleWord+0x54>)
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002786:	6113      	str	r3, [r2, #16]

	FLASH->CR |= FLASH_CR_PSIZE_8;
 8002788:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <vidFLASH_ProgramDoubleWord+0x54>)
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <vidFLASH_ProgramDoubleWord+0x54>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 8002790:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <vidFLASH_ProgramDoubleWord+0x54>)
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <vidFLASH_ProgramDoubleWord+0x54>)
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6113      	str	r3, [r2, #16]

	/* ARM Cortex M4 Supports 32 Bit instruction
	 * Here we will write in 2 times
	 * every time is 32 bit data wide
	 */
	*(volatile u32*)u32Address = (u32)u64Data;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	601a      	str	r2, [r3, #0]
	/* use ISB: Instruction Sync Barrier Assembly Instrction
	 * to ensure the instruction fetch buffer is updated with the
	 * new instructions
	 */

	asm("isb 0xF":::"memory");
 80027a2:	f3bf 8f6f 	isb	sy

	/* Program the second 32 Bit */
	*(volatile u32*)(u32Address + 4) = (u32)(u64Data >> 32);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3304      	adds	r3, #4
 80027aa:	461a      	mov	r2, r3
 80027ac:	e897 0018 	ldmia.w	r7, {r3, r4}
 80027b0:	0025      	movs	r5, r4
 80027b2:	2600      	movs	r6, #0
 80027b4:	462b      	mov	r3, r5
 80027b6:	6013      	str	r3, [r2, #0]


}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bcf0      	pop	{r4, r5, r6, r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023c00 	.word	0x40023c00

080027c8 <u16Get_MCU_ID>:
 * @brief	MCU ID Getter
 * @param 	None
 * @retval 	MCU ID
 */
u16 u16Get_MCU_ID(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
	u16 MCU_ID = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	80fb      	strh	r3, [r7, #6]
	MCU_ID = (u16)(DBGMCU_REG -> IDCODE & 0x0FFF);
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <u16Get_MCU_ID+0x24>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027dc:	80fb      	strh	r3, [r7, #6]
	return MCU_ID;
 80027de:	88fb      	ldrh	r3, [r7, #6]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e0042000 	.word	0xe0042000

080027f0 <u32CRC_Accumulate>:
 * @Param	pBuffer 		Pointer to Data input
 * @Param	Len				Length of input data to be computed
 * @Return	u32 CRC_Answer	CRC Value after computation
*/
u32 u32CRC_Accumulate(CRC_REG* CRC_Handle, u32 pBuffer[], u32 Len)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]

	u32 Index;
	u32 Temp = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]

	//vidCRC_InitReg(CRC_Handle);
	for(Index=0U; Index<Len; Index++)
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e009      	b.n	800281a <u32CRC_Accumulate+0x2a>
	{
		/* Load Data to CRC Data Register */
		CRC_Handle -> DR = pBuffer[Index];
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4413      	add	r3, r2
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]
	for(Index=0U; Index<Len; Index++)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3301      	adds	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	429a      	cmp	r2, r3
 8002820:	d3f1      	bcc.n	8002806 <u32CRC_Accumulate+0x16>
	}
	Temp = CRC_Handle -> DR;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	613b      	str	r3, [r7, #16]

	return Temp;
 8002828:	693b      	ldr	r3, [r7, #16]
}
 800282a:	4618      	mov	r0, r3
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <vidCRC_Reset>:
 * 			Start with CRC_Handle->DR as initialized value (0xFFFF FFFF)
 * @Param	CRC_Handle  	Pointer to CRC_REG Struct which has the registers
 * @Return	None
 * */
void vidCRC_Reset(CRC_REG* CRC_Handle)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
	/* Reset CRC Data Register Before starting calculating the CRC Value
	 * Reset done by Set the 0th Bit in CR Register
	*/
	CRC_Handle -> CR |= CRC_RESET;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	609a      	str	r2, [r3, #8]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <__libc_init_array>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	4e0d      	ldr	r6, [pc, #52]	; (8002890 <__libc_init_array+0x38>)
 800285c:	4c0d      	ldr	r4, [pc, #52]	; (8002894 <__libc_init_array+0x3c>)
 800285e:	1ba4      	subs	r4, r4, r6
 8002860:	10a4      	asrs	r4, r4, #2
 8002862:	2500      	movs	r5, #0
 8002864:	42a5      	cmp	r5, r4
 8002866:	d109      	bne.n	800287c <__libc_init_array+0x24>
 8002868:	4e0b      	ldr	r6, [pc, #44]	; (8002898 <__libc_init_array+0x40>)
 800286a:	4c0c      	ldr	r4, [pc, #48]	; (800289c <__libc_init_array+0x44>)
 800286c:	f000 f820 	bl	80028b0 <_init>
 8002870:	1ba4      	subs	r4, r4, r6
 8002872:	10a4      	asrs	r4, r4, #2
 8002874:	2500      	movs	r5, #0
 8002876:	42a5      	cmp	r5, r4
 8002878:	d105      	bne.n	8002886 <__libc_init_array+0x2e>
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002880:	4798      	blx	r3
 8002882:	3501      	adds	r5, #1
 8002884:	e7ee      	b.n	8002864 <__libc_init_array+0xc>
 8002886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800288a:	4798      	blx	r3
 800288c:	3501      	adds	r5, #1
 800288e:	e7f2      	b.n	8002876 <__libc_init_array+0x1e>
 8002890:	08002dd8 	.word	0x08002dd8
 8002894:	08002dd8 	.word	0x08002dd8
 8002898:	08002dd8 	.word	0x08002dd8
 800289c:	08002ddc 	.word	0x08002ddc

080028a0 <memset>:
 80028a0:	4402      	add	r2, r0
 80028a2:	4603      	mov	r3, r0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d100      	bne.n	80028aa <memset+0xa>
 80028a8:	4770      	bx	lr
 80028aa:	f803 1b01 	strb.w	r1, [r3], #1
 80028ae:	e7f9      	b.n	80028a4 <memset+0x4>

080028b0 <_init>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr

080028bc <_fini>:
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028be:	bf00      	nop
 80028c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c2:	bc08      	pop	{r3}
 80028c4:	469e      	mov	lr, r3
 80028c6:	4770      	bx	lr
